// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/updater. DO NOT EDIT.

package update

import (
	"encoding/json"
	"fmt"
	"strings"

	zeus "github.com/getbread/breadkit/zeus/types"
)

type ShopUpdateField int

const (
	ShopUpdate_AccessToken ShopUpdateField = iota
	ShopUpdate_BreadApiKey
	ShopUpdate_BreadSecretKey
	ShopUpdate_BreadSandboxApiKey
	ShopUpdate_BreadSandboxSecretKey
	ShopUpdate_Production
	ShopUpdate_AutoAuthorize
	ShopUpdate_CreateCustomers
	ShopUpdate_AutoSettle
	ShopUpdate_ActsAsLabel
	ShopUpdate_CSS
	ShopUpdate_CSSCart
	ShopUpdate_ManualEmbedScript
	ShopUpdate_AsLowAs
	ShopUpdate_EnableOrderWebhooks
	ShopUpdate_UpdatedAt
	ShopUpdate_AllowCheckoutPDP
	ShopUpdate_EnableAddToCart
	ShopUpdate_AllowCheckoutCart
	ShopUpdate_OAuthPermissionsUpToDate
	ShopUpdate_HealthcareMode
	ShopUpdate_TargetedFinancing
	ShopUpdate_TargetedFinancingID
	ShopUpdate_TargetedFinancingThreshold
	ShopUpdate_DraftOrderTax
	ShopUpdate_AcceleratedCheckoutPermitted
	ShopUpdate_POSAccess
	ShopUpdate_RemainderPayAutoCancel
	ShopUpdate_IntegrationKey
	ShopUpdate_SandboxIntegrationKey
	ShopUpdate_PlatformProduction
	ShopUpdate_ActiveVersion
)

func (s ShopUpdateField) MarshalText() ([]byte, error) {

	var data string

	switch s {
	case ShopUpdate_AccessToken:
		data = "accessToken"
	case ShopUpdate_BreadApiKey:
		data = "breadApiKey"
	case ShopUpdate_BreadSecretKey:
		data = "breadSecretKey"
	case ShopUpdate_BreadSandboxApiKey:
		data = "breadSandboxApiKey"
	case ShopUpdate_BreadSandboxSecretKey:
		data = "breadSandboxSecretKey"
	case ShopUpdate_Production:
		data = "production"
	case ShopUpdate_AutoAuthorize:
		data = "autoAuthorize"
	case ShopUpdate_CreateCustomers:
		data = "createCustomers"
	case ShopUpdate_AutoSettle:
		data = "autoSettle"
	case ShopUpdate_ActsAsLabel:
		data = "actsAsLabel"
	case ShopUpdate_CSS:
		data = "css"
	case ShopUpdate_CSSCart:
		data = "cssCart"
	case ShopUpdate_ManualEmbedScript:
		data = "manualEmbedScript"
	case ShopUpdate_AsLowAs:
		data = "asLowAs"
	case ShopUpdate_EnableOrderWebhooks:
		data = "enableOrderWebhooks"
	case ShopUpdate_UpdatedAt:
		data = "updatedAt"
	case ShopUpdate_AllowCheckoutPDP:
		data = "allowCheckoutPDP"
	case ShopUpdate_EnableAddToCart:
		data = "enableAddToCart"
	case ShopUpdate_AllowCheckoutCart:
		data = "allowCheckoutCart"
	case ShopUpdate_OAuthPermissionsUpToDate:
		data = "oauthPermissionsUpToDate"
	case ShopUpdate_HealthcareMode:
		data = "healthcareMode"
	case ShopUpdate_TargetedFinancing:
		data = "targetedFinancing"
	case ShopUpdate_TargetedFinancingID:
		data = "targetedFinancingID"
	case ShopUpdate_TargetedFinancingThreshold:
		data = "targetedFinancingThreshold"
	case ShopUpdate_DraftOrderTax:
		data = "draftOrderTax"
	case ShopUpdate_AcceleratedCheckoutPermitted:
		data = "acceleratedCheckoutPermitted"
	case ShopUpdate_POSAccess:
		data = "posAccess"
	case ShopUpdate_RemainderPayAutoCancel:
		data = "remainderPayAutoCancel"
	case ShopUpdate_IntegrationKey:
		data = "integrationKey"
	case ShopUpdate_SandboxIntegrationKey:
		data = "sandboxIntegrationKey"
	case ShopUpdate_PlatformProduction:
		data = "platformProduction"
	case ShopUpdate_ActiveVersion:
		data = "activeVersion"

	default:
		return nil, fmt.Errorf("Cannot marshal text '%v'", s)
	}

	return []byte(data), nil

}

func (s *ShopUpdateField) UnmarshalText(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "accessToken":
		*s = ShopUpdate_AccessToken
	case "breadApiKey":
		*s = ShopUpdate_BreadApiKey
	case "breadSecretKey":
		*s = ShopUpdate_BreadSecretKey
	case "breadSandboxApiKey":
		*s = ShopUpdate_BreadSandboxApiKey
	case "breadSandboxSecretKey":
		*s = ShopUpdate_BreadSandboxSecretKey
	case "production":
		*s = ShopUpdate_Production
	case "autoAuthorize":
		*s = ShopUpdate_AutoAuthorize
	case "createCustomers":
		*s = ShopUpdate_CreateCustomers
	case "autoSettle":
		*s = ShopUpdate_AutoSettle
	case "actsAsLabel":
		*s = ShopUpdate_ActsAsLabel
	case "css":
		*s = ShopUpdate_CSS
	case "cssCart":
		*s = ShopUpdate_CSSCart
	case "manualEmbedScript":
		*s = ShopUpdate_ManualEmbedScript
	case "asLowAs":
		*s = ShopUpdate_AsLowAs
	case "enableOrderWebhooks":
		*s = ShopUpdate_EnableOrderWebhooks
	case "updatedAt":
		*s = ShopUpdate_UpdatedAt
	case "allowCheckoutPDP":
		*s = ShopUpdate_AllowCheckoutPDP
	case "enableAddToCart":
		*s = ShopUpdate_EnableAddToCart
	case "allowCheckoutCart":
		*s = ShopUpdate_AllowCheckoutCart
	case "oauthPermissionsUpToDate":
		*s = ShopUpdate_OAuthPermissionsUpToDate
	case "healthcareMode":
		*s = ShopUpdate_HealthcareMode
	case "targetedFinancing":
		*s = ShopUpdate_TargetedFinancing
	case "targetedFinancingID":
		*s = ShopUpdate_TargetedFinancingID
	case "targetedFinancingThreshold":
		*s = ShopUpdate_TargetedFinancingThreshold
	case "draftOrderTax":
		*s = ShopUpdate_DraftOrderTax
	case "acceleratedCheckoutPermitted":
		*s = ShopUpdate_AcceleratedCheckoutPermitted
	case "posAccess":
		*s = ShopUpdate_POSAccess
	case "remainderPayAutoCancel":
		*s = ShopUpdate_RemainderPayAutoCancel
	case "integrationKey":
		*s = ShopUpdate_IntegrationKey
	case "sandboxIntegrationKey":
		*s = ShopUpdate_SandboxIntegrationKey
	case "platformProduction":
		*s = ShopUpdate_PlatformProduction
	case "activeVersion":
		*s = ShopUpdate_ActiveVersion

	default:
		return fmt.Errorf("Cannot unmarshal text '%s'", str)
	}

	return nil

}

func (s ShopUpdateField) String() string {
	switch s {
	case ShopUpdate_AccessToken:
		return "access_token"
	case ShopUpdate_BreadApiKey:
		return "bread_api_key"
	case ShopUpdate_BreadSecretKey:
		return "bread_secret_key"
	case ShopUpdate_BreadSandboxApiKey:
		return "bread_sandbox_api_key"
	case ShopUpdate_BreadSandboxSecretKey:
		return "bread_sandbox_secret_key"
	case ShopUpdate_Production:
		return "production"
	case ShopUpdate_AutoAuthorize:
		return "auto_authorize"
	case ShopUpdate_CreateCustomers:
		return "create_customers"
	case ShopUpdate_AutoSettle:
		return "auto_settle"
	case ShopUpdate_ActsAsLabel:
		return "acts_as_label"
	case ShopUpdate_CSS:
		return "css"
	case ShopUpdate_CSSCart:
		return "css_cart"
	case ShopUpdate_ManualEmbedScript:
		return "manual_embed_script"
	case ShopUpdate_AsLowAs:
		return "as_low_as"
	case ShopUpdate_EnableOrderWebhooks:
		return "enable_order_webhooks"
	case ShopUpdate_UpdatedAt:
		return "updated_at"
	case ShopUpdate_AllowCheckoutPDP:
		return "allow_checkout_pdp"
	case ShopUpdate_EnableAddToCart:
		return "enable_add_to_cart"
	case ShopUpdate_AllowCheckoutCart:
		return "allow_checkout_cart"
	case ShopUpdate_OAuthPermissionsUpToDate:
		return "oauth_permissions_up_to_date"
	case ShopUpdate_HealthcareMode:
		return "healthcare_mode"
	case ShopUpdate_TargetedFinancing:
		return "targeted_financing"
	case ShopUpdate_TargetedFinancingID:
		return "targeted_financing_id"
	case ShopUpdate_TargetedFinancingThreshold:
		return "targeted_financing_threshold"
	case ShopUpdate_DraftOrderTax:
		return "draft_order_tax"
	case ShopUpdate_AcceleratedCheckoutPermitted:
		return "accelerated_checkout_permitted"
	case ShopUpdate_POSAccess:
		return "pos_access"
	case ShopUpdate_RemainderPayAutoCancel:
		return "remainder_pay_decline_auto_cancel"
	case ShopUpdate_IntegrationKey:
		return "integration_key"
	case ShopUpdate_SandboxIntegrationKey:
		return "sandbox_integration_key"
	case ShopUpdate_PlatformProduction:
		return "production_v2"
	case ShopUpdate_ActiveVersion:
		return "active_version"
	}
	return ""
}

type ShopUpdateRequest struct {
	Id      zeus.Uuid                       `json:"id"`
	Updates map[ShopUpdateField]interface{} `json:"updates"`
}

func (ur ShopUpdateRequest) MarshalText() ([]byte, error) {
	stringified := make(map[string]interface{})

	for key, value := range ur.Updates {
		s, err := key.MarshalText()

		if err != nil {
			return nil, err
		}

		stringified[string(s)] = value
	}

	result := map[string]interface{}{
		"updates": stringified,
		"id":      ur.Id,
	}

	return json.Marshal(result)
}

func (ur ShopUpdateRequest) MarshalBinary() ([]byte, error) {
	stringified := make(map[string]interface{})

	for key, value := range ur.Updates {
		s, err := key.MarshalText()

		if err != nil {
			return nil, err
		}

		stringified[string(s)] = value
	}

	result := map[string]interface{}{
		"updates": stringified,
		"id":      ur.Id,
	}

	return json.Marshal(result)
}

func (ur *ShopUpdateRequest) UnmarshalText(b []byte) error {
	var i map[string]interface{}

	err := json.Unmarshal(b, &i)

	if err != nil {
		return err
	}

	ur.Id = zeus.Uuid(i["id"].(string))

	var j = make(map[ShopUpdateField]interface{})

	for key, value := range i["updates"].(map[string]interface{}) {
		var p ShopUpdateField
		err = p.UnmarshalText([]byte(key))

		if err != nil {
			return err
		}
		j[p] = value
	}

	ur.Updates = j

	return nil
}

func (ur *ShopUpdateRequest) UnmarshalBinary(b []byte) error {
	var i map[string]interface{}

	err := json.Unmarshal(b, &i)

	if err != nil {
		return err
	}

	ur.Id = zeus.Uuid(i["id"].(string))

	var j = make(map[ShopUpdateField]interface{})

	for key, value := range i["updates"].(map[string]interface{}) {
		var p ShopUpdateField
		err = p.UnmarshalText([]byte(key))

		if err != nil {
			return err
		}
		j[p] = value
	}

	ur.Updates = j

	return nil
}

// implement updater.UpdateRequest interface
func (ur *ShopUpdateRequest) GetId() zeus.Uuid {
	return ur.Id
}

func (ur *ShopUpdateRequest) GetTableName() string {
	return "shopify_shops"
}

func (ur *ShopUpdateRequest) GetUpdates() map[string]interface{} {
	updates := make(map[string]interface{})

	for field, value := range ur.Updates {
		updates[field.String()] = value
	}

	return updates
}

func (ur *ShopUpdateRequest) AddUpdate(field ShopUpdateField, value interface{}) {
	if ur.Updates == nil {
		ur.Updates = make(map[ShopUpdateField]interface{})
	}

	ur.Updates[field] = value
}
