// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/searcher. DO NOT EDIT.

package search

import (
	"fmt"
	"strings"

	"github.com/getbread/breadkit/zeus/searcher"

	zeus "github.com/getbread/breadkit/zeus/types"
)

type OrderSearchField int

const (
	OrderSearch_Id OrderSearchField = iota
	OrderSearch_ShopId
	OrderSearch_OrderId
	OrderSearch_TxId
	OrderSearch_Production
	OrderSearch_CreatedAt
	OrderSearch_UpdatedAt
)

func (s OrderSearchField) MarshalText() ([]byte, error) {
	var data string

	switch s {
	case OrderSearch_Id:
		data = "id"
	case OrderSearch_ShopId:
		data = "shop_id"
	case OrderSearch_OrderId:
		data = "order_id"
	case OrderSearch_TxId:
		data = "tx_id"
	case OrderSearch_Production:
		data = "production"
	case OrderSearch_CreatedAt:
		data = "createdAt"
	case OrderSearch_UpdatedAt:
		data = "updatedAt"

	default:
		return nil, fmt.Errorf("Cannot marshal text '%v'", s)
	}
	return []byte(data), nil
}

func (s OrderSearchField) MarshalBinary() ([]byte, error) {
	var data string

	switch s {
	case OrderSearch_Id:
		data = "id"
	case OrderSearch_ShopId:
		data = "shop_id"
	case OrderSearch_OrderId:
		data = "order_id"
	case OrderSearch_TxId:
		data = "tx_id"
	case OrderSearch_Production:
		data = "production"
	case OrderSearch_CreatedAt:
		data = "createdAt"
	case OrderSearch_UpdatedAt:
		data = "updatedAt"

	default:
		return nil, fmt.Errorf("Cannot marshal binary '%v'", s)
	}
	return []byte(data), nil
}

func (s *OrderSearchField) UnmarshalText(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = OrderSearch_Id
	case "shop_id":
		*s = OrderSearch_ShopId
	case "order_id":
		*s = OrderSearch_OrderId
	case "tx_id":
		*s = OrderSearch_TxId
	case "production":
		*s = OrderSearch_Production
	case "createdAt":
		*s = OrderSearch_CreatedAt
	case "updatedAt":
		*s = OrderSearch_UpdatedAt

	default:
		return fmt.Errorf("Cannot unmarshal text '%s'", str)
	}
	return nil
}

func (s *OrderSearchField) UnmarshalBinary(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = OrderSearch_Id
	case "shop_id":
		*s = OrderSearch_ShopId
	case "order_id":
		*s = OrderSearch_OrderId
	case "tx_id":
		*s = OrderSearch_TxId
	case "production":
		*s = OrderSearch_Production
	case "createdAt":
		*s = OrderSearch_CreatedAt
	case "updatedAt":
		*s = OrderSearch_UpdatedAt

	default:
		return fmt.Errorf("Cannot unmarshal binary '%s'", str)
	}
	return nil
}

func (s OrderSearchField) DbFieldName() string {
	switch s {
	case OrderSearch_Id:
		return "id"
	case OrderSearch_ShopId:
		return "shop_id"
	case OrderSearch_OrderId:
		return "order_id"
	case OrderSearch_TxId:
		return "tx_id"
	case OrderSearch_Production:
		return "production"
	case OrderSearch_CreatedAt:
		return "created_at"
	case OrderSearch_UpdatedAt:
		return "updated_at"

	}
	return ""
}

type OrderSearchRequest struct {
	searcher.SearchRequestFields

	Filters     []OrderSearchFilter  `json:"filters"`
	FilterGroup searcher.FilterGroup `json:"filterGroup"`
	OrderBy     OrderOrderBy         `json:"orderBy"`
	OrderBys    []OrderOrderBy       `json:"orderBys"`
	Fields      []OrderSearchField   `json:"fields"`
	IsByID      bool                 `json:"isById"`
}

type OrderSearchFilter struct {
	Field     OrderSearchField         `json:"field"`
	Value     interface{}              `json:"value"`
	Operator  searcher.FilterOperator  `json:"operator"`
	Condition searcher.FilterCondition `json:"condition"`
}

type OrderOrderBy struct {
	Field      OrderSearchField `json:"field"`
	Descending bool             `json:"desc"`
}

/*
OrderByID constructs a OrderSearchRequest to pull
a Order by it's ID.

You can add additional options using functions.

Handlers may choose to return (*Order, error) by checking the
IsSearchByID() function.
*/
func OrderByID(ID zeus.Uuid, options ...func(*OrderSearchRequest)) OrderSearchRequest {
	var searchRequest OrderSearchRequest

	searchRequest.AddFilter(
		OrderSearch_Id,
		ID,
		searcher.Operator_EQ,
		searcher.Condition_AND)

	searchRequest.Limit = 1
	searchRequest.IsByID = true

	for _, f := range options {
		f(&searchRequest)
	}

	return searchRequest
}

// implement searcher.SearchRequest interface
func (sr *OrderSearchRequest) GetTableName() string {
	return "shopify_shops_orders"
}

func (sr *OrderSearchRequest) GetFilters() []searcher.Filter {
	filters := []searcher.Filter{}

	for _, f := range sr.Filters {
		filter := searcher.Filter{
			Field:     f.Field,
			Value:     f.Value,
			Operator:  f.Operator,
			Condition: f.Condition,
		}
		filters = append(filters, filter)
	}

	return filters
}

func (sr *OrderSearchRequest) GetFilterGroup() searcher.FilterGroup {
	return sr.FilterGroup
}

func (sr *OrderSearchRequest) GetOrderBy() searcher.OrderBy {
	return searcher.OrderBy{
		Field:      sr.OrderBy.Field,
		Descending: sr.OrderBy.Descending,
	}
}

func (sr *OrderSearchRequest) GetOrderBys() []searcher.OrderBy {
	orderBys := make([]searcher.OrderBy, len(sr.OrderBys))
	for i, value := range sr.OrderBys {
		orderBys[i] = searcher.OrderBy{
			Field:      value.Field,
			Descending: value.Descending,
		}
	}
	return orderBys
}

func (sr *OrderSearchRequest) GetLimit() int {
	return sr.Limit
}

func (sr *OrderSearchRequest) GetOffset() int {
	return sr.Offset
}

func (sr *OrderSearchRequest) IsSearchByID() bool {
	return sr.IsByID
}

func (sr *OrderSearchRequest) AddFilter(field OrderSearchField, value interface{}, operator searcher.FilterOperator, condition searcher.FilterCondition) {
	if len(sr.FilterGroup.Filters) > 0 || len(sr.FilterGroup.FilterGroups) > 0 {
		panic("Filters cannot be used with FilterGroups")
	}
	f := OrderSearchFilter{
		Field:     field,
		Value:     value,
		Operator:  operator,
		Condition: condition,
	}
	sr.Filters = append(sr.Filters, f)
}

func (sr *OrderSearchRequest) SetFilterGroup(fg searcher.FilterGroup) {
	if len(sr.Filters) > 0 {
		panic("FilterGroups cannot be used with Filters")
	}
	sr.FilterGroup = fg
}

func (sr *OrderSearchRequest) SetOrderBy(field OrderSearchField, isDescending bool) {
	sr.OrderBy = OrderOrderBy{
		Field:      field,
		Descending: isDescending,
	}

	// Set this primary order by as the first in the slice
	sr.OrderBys = []OrderOrderBy{sr.OrderBy}
}

func (sr *OrderSearchRequest) SetOrderBys(orderBys ...OrderOrderBy) {
	sr.OrderBys = append([]OrderOrderBy{}, orderBys...)
}

func (sr *OrderSearchRequest) GetAllFields() []string {
	return []string{
		"id",
		"shop_id",
		"order_id",
		"tx_id",
		"production",
		"created_at",
		"updated_at",
	}
}

func (sr *OrderSearchRequest) GetFields() []string {
	fields := []string{}

	for _, f := range sr.Fields {
		fields = append(fields, f.DbFieldName())
	}

	return fields
}
