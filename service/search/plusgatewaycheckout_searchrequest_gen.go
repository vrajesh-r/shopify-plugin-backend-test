// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/searcher. DO NOT EDIT.

package search

import (
	"fmt"
	"strings"

	"github.com/getbread/breadkit/zeus/searcher"

	zeus "github.com/getbread/breadkit/zeus/types"
)

type PlusGatewayCheckoutSearchField int

const (
	PlusGatewayCheckoutSearch_Id PlusGatewayCheckoutSearchField = iota
	PlusGatewayCheckoutSearch_CheckoutID
	PlusGatewayCheckoutSearch_TransactionID
	PlusGatewayCheckoutSearch_CreatedAt
	PlusGatewayCheckoutSearch_UpdatedAt
)

func (s PlusGatewayCheckoutSearchField) MarshalText() ([]byte, error) {
	var data string

	switch s {
	case PlusGatewayCheckoutSearch_Id:
		data = "id"
	case PlusGatewayCheckoutSearch_CheckoutID:
		data = "checkoutID"
	case PlusGatewayCheckoutSearch_TransactionID:
		data = "transactionID"
	case PlusGatewayCheckoutSearch_CreatedAt:
		data = "created_at"
	case PlusGatewayCheckoutSearch_UpdatedAt:
		data = "updated_at"

	default:
		return nil, fmt.Errorf("Cannot marshal text '%v'", s)
	}
	return []byte(data), nil
}

func (s PlusGatewayCheckoutSearchField) MarshalBinary() ([]byte, error) {
	var data string

	switch s {
	case PlusGatewayCheckoutSearch_Id:
		data = "id"
	case PlusGatewayCheckoutSearch_CheckoutID:
		data = "checkoutID"
	case PlusGatewayCheckoutSearch_TransactionID:
		data = "transactionID"
	case PlusGatewayCheckoutSearch_CreatedAt:
		data = "created_at"
	case PlusGatewayCheckoutSearch_UpdatedAt:
		data = "updated_at"

	default:
		return nil, fmt.Errorf("Cannot marshal binary '%v'", s)
	}
	return []byte(data), nil
}

func (s *PlusGatewayCheckoutSearchField) UnmarshalText(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = PlusGatewayCheckoutSearch_Id
	case "checkoutID":
		*s = PlusGatewayCheckoutSearch_CheckoutID
	case "transactionID":
		*s = PlusGatewayCheckoutSearch_TransactionID
	case "created_at":
		*s = PlusGatewayCheckoutSearch_CreatedAt
	case "updated_at":
		*s = PlusGatewayCheckoutSearch_UpdatedAt

	default:
		return fmt.Errorf("Cannot unmarshal text '%s'", str)
	}
	return nil
}

func (s *PlusGatewayCheckoutSearchField) UnmarshalBinary(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = PlusGatewayCheckoutSearch_Id
	case "checkoutID":
		*s = PlusGatewayCheckoutSearch_CheckoutID
	case "transactionID":
		*s = PlusGatewayCheckoutSearch_TransactionID
	case "created_at":
		*s = PlusGatewayCheckoutSearch_CreatedAt
	case "updated_at":
		*s = PlusGatewayCheckoutSearch_UpdatedAt

	default:
		return fmt.Errorf("Cannot unmarshal binary '%s'", str)
	}
	return nil
}

func (s PlusGatewayCheckoutSearchField) DbFieldName() string {
	switch s {
	case PlusGatewayCheckoutSearch_Id:
		return "id"
	case PlusGatewayCheckoutSearch_CheckoutID:
		return "checkout_id"
	case PlusGatewayCheckoutSearch_TransactionID:
		return "transaction_id"
	case PlusGatewayCheckoutSearch_CreatedAt:
		return "created_at"
	case PlusGatewayCheckoutSearch_UpdatedAt:
		return "updated_at"

	}
	return ""
}

type PlusGatewayCheckoutSearchRequest struct {
	searcher.SearchRequestFields

	Filters     []PlusGatewayCheckoutSearchFilter `json:"filters"`
	FilterGroup searcher.FilterGroup              `json:"filterGroup"`
	OrderBy     PlusGatewayCheckoutOrderBy        `json:"orderBy"`
	OrderBys    []PlusGatewayCheckoutOrderBy      `json:"orderBys"`
	Fields      []PlusGatewayCheckoutSearchField  `json:"fields"`
	IsByID      bool                              `json:"isById"`
}

type PlusGatewayCheckoutSearchFilter struct {
	Field     PlusGatewayCheckoutSearchField `json:"field"`
	Value     interface{}                    `json:"value"`
	Operator  searcher.FilterOperator        `json:"operator"`
	Condition searcher.FilterCondition       `json:"condition"`
}

type PlusGatewayCheckoutOrderBy struct {
	Field      PlusGatewayCheckoutSearchField `json:"field"`
	Descending bool                           `json:"desc"`
}

/*
PlusGatewayCheckoutByID constructs a PlusGatewayCheckoutSearchRequest to pull
a PlusGatewayCheckout by it's ID.

You can add additional options using functions.

Handlers may choose to return (*PlusGatewayCheckout, error) by checking the
IsSearchByID() function.
*/
func PlusGatewayCheckoutByID(ID zeus.Uuid, options ...func(*PlusGatewayCheckoutSearchRequest)) PlusGatewayCheckoutSearchRequest {
	var searchRequest PlusGatewayCheckoutSearchRequest

	searchRequest.AddFilter(
		PlusGatewayCheckoutSearch_Id,
		ID,
		searcher.Operator_EQ,
		searcher.Condition_AND)

	searchRequest.Limit = 1
	searchRequest.IsByID = true

	for _, f := range options {
		f(&searchRequest)
	}

	return searchRequest
}

// implement searcher.SearchRequest interface
func (sr *PlusGatewayCheckoutSearchRequest) GetTableName() string {
	return "shopify_plus_gateway_checkouts"
}

func (sr *PlusGatewayCheckoutSearchRequest) GetFilters() []searcher.Filter {
	filters := []searcher.Filter{}

	for _, f := range sr.Filters {
		filter := searcher.Filter{
			Field:     f.Field,
			Value:     f.Value,
			Operator:  f.Operator,
			Condition: f.Condition,
		}
		filters = append(filters, filter)
	}

	return filters
}

func (sr *PlusGatewayCheckoutSearchRequest) GetFilterGroup() searcher.FilterGroup {
	return sr.FilterGroup
}

func (sr *PlusGatewayCheckoutSearchRequest) GetOrderBy() searcher.OrderBy {
	return searcher.OrderBy{
		Field:      sr.OrderBy.Field,
		Descending: sr.OrderBy.Descending,
	}
}

func (sr *PlusGatewayCheckoutSearchRequest) GetOrderBys() []searcher.OrderBy {
	orderBys := make([]searcher.OrderBy, len(sr.OrderBys))
	for i, value := range sr.OrderBys {
		orderBys[i] = searcher.OrderBy{
			Field:      value.Field,
			Descending: value.Descending,
		}
	}
	return orderBys
}

func (sr *PlusGatewayCheckoutSearchRequest) GetLimit() int {
	return sr.Limit
}

func (sr *PlusGatewayCheckoutSearchRequest) GetOffset() int {
	return sr.Offset
}

func (sr *PlusGatewayCheckoutSearchRequest) IsSearchByID() bool {
	return sr.IsByID
}

func (sr *PlusGatewayCheckoutSearchRequest) AddFilter(field PlusGatewayCheckoutSearchField, value interface{}, operator searcher.FilterOperator, condition searcher.FilterCondition) {
	if len(sr.FilterGroup.Filters) > 0 || len(sr.FilterGroup.FilterGroups) > 0 {
		panic("Filters cannot be used with FilterGroups")
	}
	f := PlusGatewayCheckoutSearchFilter{
		Field:     field,
		Value:     value,
		Operator:  operator,
		Condition: condition,
	}
	sr.Filters = append(sr.Filters, f)
}

func (sr *PlusGatewayCheckoutSearchRequest) SetFilterGroup(fg searcher.FilterGroup) {
	if len(sr.Filters) > 0 {
		panic("FilterGroups cannot be used with Filters")
	}
	sr.FilterGroup = fg
}

func (sr *PlusGatewayCheckoutSearchRequest) SetOrderBy(field PlusGatewayCheckoutSearchField, isDescending bool) {
	sr.OrderBy = PlusGatewayCheckoutOrderBy{
		Field:      field,
		Descending: isDescending,
	}

	// Set this primary order by as the first in the slice
	sr.OrderBys = []PlusGatewayCheckoutOrderBy{sr.OrderBy}
}

func (sr *PlusGatewayCheckoutSearchRequest) SetOrderBys(orderBys ...PlusGatewayCheckoutOrderBy) {
	sr.OrderBys = append([]PlusGatewayCheckoutOrderBy{}, orderBys...)
}

func (sr *PlusGatewayCheckoutSearchRequest) GetAllFields() []string {
	return []string{
		"id",
		"checkout_id",
		"transaction_id",
		"created_at",
		"updated_at",
	}
}

func (sr *PlusGatewayCheckoutSearchRequest) GetFields() []string {
	fields := []string{}

	for _, f := range sr.Fields {
		fields = append(fields, f.DbFieldName())
	}

	return fields
}
