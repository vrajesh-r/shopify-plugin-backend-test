// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/searcher. DO NOT EDIT.

package search

import (
	"fmt"
	"strings"

	"github.com/getbread/breadkit/zeus/searcher"

	zeus "github.com/getbread/breadkit/zeus/types"
)

type DraftOrderCartSearchField int

const (
	DraftOrderCartSearch_ID DraftOrderCartSearchField = iota
	DraftOrderCartSearch_ShopID
	DraftOrderCartSearch_DraftOrderID
	DraftOrderCartSearch_CartID
	DraftOrderCartSearch_CartURL
	DraftOrderCartSearch_IsProduction
	DraftOrderCartSearch_IsDeleted
	DraftOrderCartSearch_UseDraftOrderAsOrder
	DraftOrderCartSearch_CreatedAt
	DraftOrderCartSearch_UpdatedAt
)

func (s DraftOrderCartSearchField) MarshalText() ([]byte, error) {
	var data string

	switch s {
	case DraftOrderCartSearch_ID:
		data = "id"
	case DraftOrderCartSearch_ShopID:
		data = "shopId"
	case DraftOrderCartSearch_DraftOrderID:
		data = "draftOrderId"
	case DraftOrderCartSearch_CartID:
		data = "cartId"
	case DraftOrderCartSearch_CartURL:
		data = "cartUrl"
	case DraftOrderCartSearch_IsProduction:
		data = "isProduction"
	case DraftOrderCartSearch_IsDeleted:
		data = "isDeleted"
	case DraftOrderCartSearch_UseDraftOrderAsOrder:
		data = "useDraftOrderAsOrder"
	case DraftOrderCartSearch_CreatedAt:
		data = "createdAt"
	case DraftOrderCartSearch_UpdatedAt:
		data = "updatedAt"

	default:
		return nil, fmt.Errorf("Cannot marshal text '%v'", s)
	}
	return []byte(data), nil
}

func (s DraftOrderCartSearchField) MarshalBinary() ([]byte, error) {
	var data string

	switch s {
	case DraftOrderCartSearch_ID:
		data = "id"
	case DraftOrderCartSearch_ShopID:
		data = "shopId"
	case DraftOrderCartSearch_DraftOrderID:
		data = "draftOrderId"
	case DraftOrderCartSearch_CartID:
		data = "cartId"
	case DraftOrderCartSearch_CartURL:
		data = "cartUrl"
	case DraftOrderCartSearch_IsProduction:
		data = "isProduction"
	case DraftOrderCartSearch_IsDeleted:
		data = "isDeleted"
	case DraftOrderCartSearch_UseDraftOrderAsOrder:
		data = "useDraftOrderAsOrder"
	case DraftOrderCartSearch_CreatedAt:
		data = "createdAt"
	case DraftOrderCartSearch_UpdatedAt:
		data = "updatedAt"

	default:
		return nil, fmt.Errorf("Cannot marshal binary '%v'", s)
	}
	return []byte(data), nil
}

func (s *DraftOrderCartSearchField) UnmarshalText(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = DraftOrderCartSearch_ID
	case "shopId":
		*s = DraftOrderCartSearch_ShopID
	case "draftOrderId":
		*s = DraftOrderCartSearch_DraftOrderID
	case "cartId":
		*s = DraftOrderCartSearch_CartID
	case "cartUrl":
		*s = DraftOrderCartSearch_CartURL
	case "isProduction":
		*s = DraftOrderCartSearch_IsProduction
	case "isDeleted":
		*s = DraftOrderCartSearch_IsDeleted
	case "useDraftOrderAsOrder":
		*s = DraftOrderCartSearch_UseDraftOrderAsOrder
	case "createdAt":
		*s = DraftOrderCartSearch_CreatedAt
	case "updatedAt":
		*s = DraftOrderCartSearch_UpdatedAt

	default:
		return fmt.Errorf("Cannot unmarshal text '%s'", str)
	}
	return nil
}

func (s *DraftOrderCartSearchField) UnmarshalBinary(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = DraftOrderCartSearch_ID
	case "shopId":
		*s = DraftOrderCartSearch_ShopID
	case "draftOrderId":
		*s = DraftOrderCartSearch_DraftOrderID
	case "cartId":
		*s = DraftOrderCartSearch_CartID
	case "cartUrl":
		*s = DraftOrderCartSearch_CartURL
	case "isProduction":
		*s = DraftOrderCartSearch_IsProduction
	case "isDeleted":
		*s = DraftOrderCartSearch_IsDeleted
	case "useDraftOrderAsOrder":
		*s = DraftOrderCartSearch_UseDraftOrderAsOrder
	case "createdAt":
		*s = DraftOrderCartSearch_CreatedAt
	case "updatedAt":
		*s = DraftOrderCartSearch_UpdatedAt

	default:
		return fmt.Errorf("Cannot unmarshal binary '%s'", str)
	}
	return nil
}

func (s DraftOrderCartSearchField) DbFieldName() string {
	switch s {
	case DraftOrderCartSearch_ID:
		return "id"
	case DraftOrderCartSearch_ShopID:
		return "shop_id"
	case DraftOrderCartSearch_DraftOrderID:
		return "draft_order_id"
	case DraftOrderCartSearch_CartID:
		return "cart_id"
	case DraftOrderCartSearch_CartURL:
		return "cart_url"
	case DraftOrderCartSearch_IsProduction:
		return "is_production"
	case DraftOrderCartSearch_IsDeleted:
		return "is_deleted"
	case DraftOrderCartSearch_UseDraftOrderAsOrder:
		return "use_draft_order_as_order"
	case DraftOrderCartSearch_CreatedAt:
		return "created_at"
	case DraftOrderCartSearch_UpdatedAt:
		return "updated_at"

	}
	return ""
}

type DraftOrderCartSearchRequest struct {
	searcher.SearchRequestFields

	Filters     []DraftOrderCartSearchFilter `json:"filters"`
	FilterGroup searcher.FilterGroup         `json:"filterGroup"`
	OrderBy     DraftOrderCartOrderBy        `json:"orderBy"`
	OrderBys    []DraftOrderCartOrderBy      `json:"orderBys"`
	Fields      []DraftOrderCartSearchField  `json:"fields"`
	IsByID      bool                         `json:"isById"`
}

type DraftOrderCartSearchFilter struct {
	Field     DraftOrderCartSearchField `json:"field"`
	Value     interface{}               `json:"value"`
	Operator  searcher.FilterOperator   `json:"operator"`
	Condition searcher.FilterCondition  `json:"condition"`
}

type DraftOrderCartOrderBy struct {
	Field      DraftOrderCartSearchField `json:"field"`
	Descending bool                      `json:"desc"`
}

/*
DraftOrderCartByID constructs a DraftOrderCartSearchRequest to pull
a DraftOrderCart by it's ID.

You can add additional options using functions.

Handlers may choose to return (*DraftOrderCart, error) by checking the
IsSearchByID() function.
*/
func DraftOrderCartByID(ID zeus.Uuid, options ...func(*DraftOrderCartSearchRequest)) DraftOrderCartSearchRequest {
	var searchRequest DraftOrderCartSearchRequest

	searchRequest.AddFilter(
		DraftOrderCartSearch_ID,
		ID,
		searcher.Operator_EQ,
		searcher.Condition_AND)

	searchRequest.Limit = 1
	searchRequest.IsByID = true

	for _, f := range options {
		f(&searchRequest)
	}

	return searchRequest
}

// implement searcher.SearchRequest interface
func (sr *DraftOrderCartSearchRequest) GetTableName() string {
	return "shopify_shops_draft_order_carts"
}

func (sr *DraftOrderCartSearchRequest) GetFilters() []searcher.Filter {
	filters := []searcher.Filter{}

	for _, f := range sr.Filters {
		filter := searcher.Filter{
			Field:     f.Field,
			Value:     f.Value,
			Operator:  f.Operator,
			Condition: f.Condition,
		}
		filters = append(filters, filter)
	}

	return filters
}

func (sr *DraftOrderCartSearchRequest) GetFilterGroup() searcher.FilterGroup {
	return sr.FilterGroup
}

func (sr *DraftOrderCartSearchRequest) GetOrderBy() searcher.OrderBy {
	return searcher.OrderBy{
		Field:      sr.OrderBy.Field,
		Descending: sr.OrderBy.Descending,
	}
}

func (sr *DraftOrderCartSearchRequest) GetOrderBys() []searcher.OrderBy {
	orderBys := make([]searcher.OrderBy, len(sr.OrderBys))
	for i, value := range sr.OrderBys {
		orderBys[i] = searcher.OrderBy{
			Field:      value.Field,
			Descending: value.Descending,
		}
	}
	return orderBys
}

func (sr *DraftOrderCartSearchRequest) GetLimit() int {
	return sr.Limit
}

func (sr *DraftOrderCartSearchRequest) GetOffset() int {
	return sr.Offset
}

func (sr *DraftOrderCartSearchRequest) IsSearchByID() bool {
	return sr.IsByID
}

func (sr *DraftOrderCartSearchRequest) AddFilter(field DraftOrderCartSearchField, value interface{}, operator searcher.FilterOperator, condition searcher.FilterCondition) {
	if len(sr.FilterGroup.Filters) > 0 || len(sr.FilterGroup.FilterGroups) > 0 {
		panic("Filters cannot be used with FilterGroups")
	}
	f := DraftOrderCartSearchFilter{
		Field:     field,
		Value:     value,
		Operator:  operator,
		Condition: condition,
	}
	sr.Filters = append(sr.Filters, f)
}

func (sr *DraftOrderCartSearchRequest) SetFilterGroup(fg searcher.FilterGroup) {
	if len(sr.Filters) > 0 {
		panic("FilterGroups cannot be used with Filters")
	}
	sr.FilterGroup = fg
}

func (sr *DraftOrderCartSearchRequest) SetOrderBy(field DraftOrderCartSearchField, isDescending bool) {
	sr.OrderBy = DraftOrderCartOrderBy{
		Field:      field,
		Descending: isDescending,
	}

	// Set this primary order by as the first in the slice
	sr.OrderBys = []DraftOrderCartOrderBy{sr.OrderBy}
}

func (sr *DraftOrderCartSearchRequest) SetOrderBys(orderBys ...DraftOrderCartOrderBy) {
	sr.OrderBys = append([]DraftOrderCartOrderBy{}, orderBys...)
}

func (sr *DraftOrderCartSearchRequest) GetAllFields() []string {
	return []string{
		"id",
		"shop_id",
		"draft_order_id",
		"cart_id",
		"cart_url",
		"is_production",
		"is_deleted",
		"use_draft_order_as_order",
		"created_at",
		"updated_at",
	}
}

func (sr *DraftOrderCartSearchRequest) GetFields() []string {
	fields := []string{}

	for _, f := range sr.Fields {
		fields = append(fields, f.DbFieldName())
	}

	return fields
}
