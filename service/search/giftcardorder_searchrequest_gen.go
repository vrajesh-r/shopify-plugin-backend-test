// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/searcher. DO NOT EDIT.

package search

import (
	"fmt"
	"strings"

	"github.com/getbread/breadkit/zeus/searcher"

	zeus "github.com/getbread/breadkit/zeus/types"
)

type GiftCardOrderSearchField int

const (
	GiftCardOrderSearch_ID GiftCardOrderSearchField = iota
	GiftCardOrderSearch_OrderID
	GiftCardOrderSearch_ShopName
	GiftCardOrderSearch_Gateway
	GiftCardOrderSearch_Test
	GiftCardOrderSearch_ItemName
	GiftCardOrderSearch_ItemPrice
	GiftCardOrderSearch_RequiresShipping
	GiftCardOrderSearch_IsShopifyGiftCard
	GiftCardOrderSearch_NameContainsGiftOnly
	GiftCardOrderSearch_NameContainsGiftCard
	GiftCardOrderSearch_CreatedAt
	GiftCardOrderSearch_UpdatedAt
)

func (s GiftCardOrderSearchField) MarshalText() ([]byte, error) {
	var data string

	switch s {
	case GiftCardOrderSearch_ID:
		data = "id"
	case GiftCardOrderSearch_OrderID:
		data = "orderID"
	case GiftCardOrderSearch_ShopName:
		data = "shopName"
	case GiftCardOrderSearch_Gateway:
		data = "gateway"
	case GiftCardOrderSearch_Test:
		data = "test"
	case GiftCardOrderSearch_ItemName:
		data = "itemName"
	case GiftCardOrderSearch_ItemPrice:
		data = "itemPrice"
	case GiftCardOrderSearch_RequiresShipping:
		data = "requiresShipping"
	case GiftCardOrderSearch_IsShopifyGiftCard:
		data = "isShopifyGiftCard"
	case GiftCardOrderSearch_NameContainsGiftOnly:
		data = "nameContainsGiftOnly"
	case GiftCardOrderSearch_NameContainsGiftCard:
		data = "nameContainsGiftCard"
	case GiftCardOrderSearch_CreatedAt:
		data = "createdAt"
	case GiftCardOrderSearch_UpdatedAt:
		data = "updatedAt"

	default:
		return nil, fmt.Errorf("Cannot marshal text '%v'", s)
	}
	return []byte(data), nil
}

func (s GiftCardOrderSearchField) MarshalBinary() ([]byte, error) {
	var data string

	switch s {
	case GiftCardOrderSearch_ID:
		data = "id"
	case GiftCardOrderSearch_OrderID:
		data = "orderID"
	case GiftCardOrderSearch_ShopName:
		data = "shopName"
	case GiftCardOrderSearch_Gateway:
		data = "gateway"
	case GiftCardOrderSearch_Test:
		data = "test"
	case GiftCardOrderSearch_ItemName:
		data = "itemName"
	case GiftCardOrderSearch_ItemPrice:
		data = "itemPrice"
	case GiftCardOrderSearch_RequiresShipping:
		data = "requiresShipping"
	case GiftCardOrderSearch_IsShopifyGiftCard:
		data = "isShopifyGiftCard"
	case GiftCardOrderSearch_NameContainsGiftOnly:
		data = "nameContainsGiftOnly"
	case GiftCardOrderSearch_NameContainsGiftCard:
		data = "nameContainsGiftCard"
	case GiftCardOrderSearch_CreatedAt:
		data = "createdAt"
	case GiftCardOrderSearch_UpdatedAt:
		data = "updatedAt"

	default:
		return nil, fmt.Errorf("Cannot marshal binary '%v'", s)
	}
	return []byte(data), nil
}

func (s *GiftCardOrderSearchField) UnmarshalText(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = GiftCardOrderSearch_ID
	case "orderID":
		*s = GiftCardOrderSearch_OrderID
	case "shopName":
		*s = GiftCardOrderSearch_ShopName
	case "gateway":
		*s = GiftCardOrderSearch_Gateway
	case "test":
		*s = GiftCardOrderSearch_Test
	case "itemName":
		*s = GiftCardOrderSearch_ItemName
	case "itemPrice":
		*s = GiftCardOrderSearch_ItemPrice
	case "requiresShipping":
		*s = GiftCardOrderSearch_RequiresShipping
	case "isShopifyGiftCard":
		*s = GiftCardOrderSearch_IsShopifyGiftCard
	case "nameContainsGiftOnly":
		*s = GiftCardOrderSearch_NameContainsGiftOnly
	case "nameContainsGiftCard":
		*s = GiftCardOrderSearch_NameContainsGiftCard
	case "createdAt":
		*s = GiftCardOrderSearch_CreatedAt
	case "updatedAt":
		*s = GiftCardOrderSearch_UpdatedAt

	default:
		return fmt.Errorf("Cannot unmarshal text '%s'", str)
	}
	return nil
}

func (s *GiftCardOrderSearchField) UnmarshalBinary(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = GiftCardOrderSearch_ID
	case "orderID":
		*s = GiftCardOrderSearch_OrderID
	case "shopName":
		*s = GiftCardOrderSearch_ShopName
	case "gateway":
		*s = GiftCardOrderSearch_Gateway
	case "test":
		*s = GiftCardOrderSearch_Test
	case "itemName":
		*s = GiftCardOrderSearch_ItemName
	case "itemPrice":
		*s = GiftCardOrderSearch_ItemPrice
	case "requiresShipping":
		*s = GiftCardOrderSearch_RequiresShipping
	case "isShopifyGiftCard":
		*s = GiftCardOrderSearch_IsShopifyGiftCard
	case "nameContainsGiftOnly":
		*s = GiftCardOrderSearch_NameContainsGiftOnly
	case "nameContainsGiftCard":
		*s = GiftCardOrderSearch_NameContainsGiftCard
	case "createdAt":
		*s = GiftCardOrderSearch_CreatedAt
	case "updatedAt":
		*s = GiftCardOrderSearch_UpdatedAt

	default:
		return fmt.Errorf("Cannot unmarshal binary '%s'", str)
	}
	return nil
}

func (s GiftCardOrderSearchField) DbFieldName() string {
	switch s {
	case GiftCardOrderSearch_ID:
		return "id"
	case GiftCardOrderSearch_OrderID:
		return "order_id"
	case GiftCardOrderSearch_ShopName:
		return "shop_name"
	case GiftCardOrderSearch_Gateway:
		return "gateway"
	case GiftCardOrderSearch_Test:
		return "test"
	case GiftCardOrderSearch_ItemName:
		return "item_name"
	case GiftCardOrderSearch_ItemPrice:
		return "item_price"
	case GiftCardOrderSearch_RequiresShipping:
		return "requires_shipping"
	case GiftCardOrderSearch_IsShopifyGiftCard:
		return "is_shopify_gift_card"
	case GiftCardOrderSearch_NameContainsGiftOnly:
		return "name_contains_gift_only"
	case GiftCardOrderSearch_NameContainsGiftCard:
		return "name_contains_gift_card"
	case GiftCardOrderSearch_CreatedAt:
		return "created_at"
	case GiftCardOrderSearch_UpdatedAt:
		return "updated_at"

	}
	return ""
}

type GiftCardOrderSearchRequest struct {
	searcher.SearchRequestFields

	Filters     []GiftCardOrderSearchFilter `json:"filters"`
	FilterGroup searcher.FilterGroup        `json:"filterGroup"`
	OrderBy     GiftCardOrderOrderBy        `json:"orderBy"`
	OrderBys    []GiftCardOrderOrderBy      `json:"orderBys"`
	Fields      []GiftCardOrderSearchField  `json:"fields"`
	IsByID      bool                        `json:"isById"`
}

type GiftCardOrderSearchFilter struct {
	Field     GiftCardOrderSearchField `json:"field"`
	Value     interface{}              `json:"value"`
	Operator  searcher.FilterOperator  `json:"operator"`
	Condition searcher.FilterCondition `json:"condition"`
}

type GiftCardOrderOrderBy struct {
	Field      GiftCardOrderSearchField `json:"field"`
	Descending bool                     `json:"desc"`
}

/*
GiftCardOrderByID constructs a GiftCardOrderSearchRequest to pull
a GiftCardOrder by it's ID.

You can add additional options using functions.

Handlers may choose to return (*GiftCardOrder, error) by checking the
IsSearchByID() function.
*/
func GiftCardOrderByID(ID zeus.Uuid, options ...func(*GiftCardOrderSearchRequest)) GiftCardOrderSearchRequest {
	var searchRequest GiftCardOrderSearchRequest

	searchRequest.AddFilter(
		GiftCardOrderSearch_ID,
		ID,
		searcher.Operator_EQ,
		searcher.Condition_AND)

	searchRequest.Limit = 1
	searchRequest.IsByID = true

	for _, f := range options {
		f(&searchRequest)
	}

	return searchRequest
}

// implement searcher.SearchRequest interface
func (sr *GiftCardOrderSearchRequest) GetTableName() string {
	return "shopify_gift_card_orders"
}

func (sr *GiftCardOrderSearchRequest) GetFilters() []searcher.Filter {
	filters := []searcher.Filter{}

	for _, f := range sr.Filters {
		filter := searcher.Filter{
			Field:     f.Field,
			Value:     f.Value,
			Operator:  f.Operator,
			Condition: f.Condition,
		}
		filters = append(filters, filter)
	}

	return filters
}

func (sr *GiftCardOrderSearchRequest) GetFilterGroup() searcher.FilterGroup {
	return sr.FilterGroup
}

func (sr *GiftCardOrderSearchRequest) GetOrderBy() searcher.OrderBy {
	return searcher.OrderBy{
		Field:      sr.OrderBy.Field,
		Descending: sr.OrderBy.Descending,
	}
}

func (sr *GiftCardOrderSearchRequest) GetOrderBys() []searcher.OrderBy {
	orderBys := make([]searcher.OrderBy, len(sr.OrderBys))
	for i, value := range sr.OrderBys {
		orderBys[i] = searcher.OrderBy{
			Field:      value.Field,
			Descending: value.Descending,
		}
	}
	return orderBys
}

func (sr *GiftCardOrderSearchRequest) GetLimit() int {
	return sr.Limit
}

func (sr *GiftCardOrderSearchRequest) GetOffset() int {
	return sr.Offset
}

func (sr *GiftCardOrderSearchRequest) IsSearchByID() bool {
	return sr.IsByID
}

func (sr *GiftCardOrderSearchRequest) AddFilter(field GiftCardOrderSearchField, value interface{}, operator searcher.FilterOperator, condition searcher.FilterCondition) {
	if len(sr.FilterGroup.Filters) > 0 || len(sr.FilterGroup.FilterGroups) > 0 {
		panic("Filters cannot be used with FilterGroups")
	}
	f := GiftCardOrderSearchFilter{
		Field:     field,
		Value:     value,
		Operator:  operator,
		Condition: condition,
	}
	sr.Filters = append(sr.Filters, f)
}

func (sr *GiftCardOrderSearchRequest) SetFilterGroup(fg searcher.FilterGroup) {
	if len(sr.Filters) > 0 {
		panic("FilterGroups cannot be used with Filters")
	}
	sr.FilterGroup = fg
}

func (sr *GiftCardOrderSearchRequest) SetOrderBy(field GiftCardOrderSearchField, isDescending bool) {
	sr.OrderBy = GiftCardOrderOrderBy{
		Field:      field,
		Descending: isDescending,
	}

	// Set this primary order by as the first in the slice
	sr.OrderBys = []GiftCardOrderOrderBy{sr.OrderBy}
}

func (sr *GiftCardOrderSearchRequest) SetOrderBys(orderBys ...GiftCardOrderOrderBy) {
	sr.OrderBys = append([]GiftCardOrderOrderBy{}, orderBys...)
}

func (sr *GiftCardOrderSearchRequest) GetAllFields() []string {
	return []string{
		"id",
		"order_id",
		"shop_name",
		"gateway",
		"test",
		"item_name",
		"item_price",
		"quantity",
		"requires_shipping",
		"is_shopify_gift_card",
		"name_contains_gift_only",
		"name_contains_gift_card",
		"created_at",
		"updated_at",
	}
}

func (sr *GiftCardOrderSearchRequest) GetFields() []string {
	fields := []string{}

	for _, f := range sr.Fields {
		fields = append(fields, f.DbFieldName())
	}

	return fields
}
