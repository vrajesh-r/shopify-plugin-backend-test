// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/searcher. DO NOT EDIT.

package search

import (
	"fmt"
	"strings"

	"github.com/getbread/breadkit/zeus/searcher"

	zeus "github.com/getbread/breadkit/zeus/types"
)

type ShopSearchField int

const (
	ShopSearch_Id ShopSearchField = iota
	ShopSearch_Shop
	ShopSearch_BreadApiKey
	ShopSearch_BreadSandboxApiKey
	ShopSearch_CreatedAt
	ShopSearch_UpdatedAt
	ShopSearch_OAuthPermissionsUpToDate
	ShopSearch_IntegrationKey
	ShopSearch_ActiveVersion
)

func (s ShopSearchField) MarshalText() ([]byte, error) {
	var data string

	switch s {
	case ShopSearch_Id:
		data = "id"
	case ShopSearch_Shop:
		data = "shop"
	case ShopSearch_BreadApiKey:
		data = "breadApiKey"
	case ShopSearch_BreadSandboxApiKey:
		data = "breadSandboxApiKey"
	case ShopSearch_CreatedAt:
		data = "createdAt"
	case ShopSearch_UpdatedAt:
		data = "updatedAt"
	case ShopSearch_OAuthPermissionsUpToDate:
		data = "oauthPermissionsUpToDate"
	case ShopSearch_IntegrationKey:
		data = "integrationKey"
	case ShopSearch_ActiveVersion:
		data = "activeVersion"

	default:
		return nil, fmt.Errorf("Cannot marshal text '%v'", s)
	}
	return []byte(data), nil
}

func (s ShopSearchField) MarshalBinary() ([]byte, error) {
	var data string

	switch s {
	case ShopSearch_Id:
		data = "id"
	case ShopSearch_Shop:
		data = "shop"
	case ShopSearch_BreadApiKey:
		data = "breadApiKey"
	case ShopSearch_BreadSandboxApiKey:
		data = "breadSandboxApiKey"
	case ShopSearch_CreatedAt:
		data = "createdAt"
	case ShopSearch_UpdatedAt:
		data = "updatedAt"
	case ShopSearch_OAuthPermissionsUpToDate:
		data = "oauthPermissionsUpToDate"
	case ShopSearch_IntegrationKey:
		data = "integrationKey"
	case ShopSearch_ActiveVersion:
		data = "activeVersion"

	default:
		return nil, fmt.Errorf("Cannot marshal binary '%v'", s)
	}
	return []byte(data), nil
}

func (s *ShopSearchField) UnmarshalText(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = ShopSearch_Id
	case "shop":
		*s = ShopSearch_Shop
	case "breadApiKey":
		*s = ShopSearch_BreadApiKey
	case "breadSandboxApiKey":
		*s = ShopSearch_BreadSandboxApiKey
	case "createdAt":
		*s = ShopSearch_CreatedAt
	case "updatedAt":
		*s = ShopSearch_UpdatedAt
	case "oauthPermissionsUpToDate":
		*s = ShopSearch_OAuthPermissionsUpToDate
	case "integrationKey":
		*s = ShopSearch_IntegrationKey
	case "activeVersion":
		*s = ShopSearch_ActiveVersion

	default:
		return fmt.Errorf("Cannot unmarshal text '%s'", str)
	}
	return nil
}

func (s *ShopSearchField) UnmarshalBinary(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = ShopSearch_Id
	case "shop":
		*s = ShopSearch_Shop
	case "breadApiKey":
		*s = ShopSearch_BreadApiKey
	case "breadSandboxApiKey":
		*s = ShopSearch_BreadSandboxApiKey
	case "createdAt":
		*s = ShopSearch_CreatedAt
	case "updatedAt":
		*s = ShopSearch_UpdatedAt
	case "oauthPermissionsUpToDate":
		*s = ShopSearch_OAuthPermissionsUpToDate
	case "integrationKey":
		*s = ShopSearch_IntegrationKey
	case "activeVersion":
		*s = ShopSearch_ActiveVersion

	default:
		return fmt.Errorf("Cannot unmarshal binary '%s'", str)
	}
	return nil
}

func (s ShopSearchField) DbFieldName() string {
	switch s {
	case ShopSearch_Id:
		return "id"
	case ShopSearch_Shop:
		return "shop"
	case ShopSearch_BreadApiKey:
		return "bread_api_key"
	case ShopSearch_BreadSandboxApiKey:
		return "bread_sandbox_api_key"
	case ShopSearch_CreatedAt:
		return "created_at"
	case ShopSearch_UpdatedAt:
		return "updated_at"
	case ShopSearch_OAuthPermissionsUpToDate:
		return "oauth_permissions_up_to_date"
	case ShopSearch_IntegrationKey:
		return "integration_key"
	case ShopSearch_ActiveVersion:
		return "active_version"

	}
	return ""
}

type ShopSearchRequest struct {
	searcher.SearchRequestFields

	Filters     []ShopSearchFilter   `json:"filters"`
	FilterGroup searcher.FilterGroup `json:"filterGroup"`
	OrderBy     ShopOrderBy          `json:"orderBy"`
	OrderBys    []ShopOrderBy        `json:"orderBys"`
	Fields      []ShopSearchField    `json:"fields"`
	IsByID      bool                 `json:"isById"`
}

type ShopSearchFilter struct {
	Field     ShopSearchField          `json:"field"`
	Value     interface{}              `json:"value"`
	Operator  searcher.FilterOperator  `json:"operator"`
	Condition searcher.FilterCondition `json:"condition"`
}

type ShopOrderBy struct {
	Field      ShopSearchField `json:"field"`
	Descending bool            `json:"desc"`
}

/*
ShopByID constructs a ShopSearchRequest to pull
a Shop by it's ID.

You can add additional options using functions.

Handlers may choose to return (*Shop, error) by checking the
IsSearchByID() function.
*/
func ShopByID(ID zeus.Uuid, options ...func(*ShopSearchRequest)) ShopSearchRequest {
	var searchRequest ShopSearchRequest

	searchRequest.AddFilter(
		ShopSearch_Id,
		ID,
		searcher.Operator_EQ,
		searcher.Condition_AND)

	searchRequest.Limit = 1
	searchRequest.IsByID = true

	for _, f := range options {
		f(&searchRequest)
	}

	return searchRequest
}

// implement searcher.SearchRequest interface
func (sr *ShopSearchRequest) GetTableName() string {
	return "shopify_shops"
}

func (sr *ShopSearchRequest) GetFilters() []searcher.Filter {
	filters := []searcher.Filter{}

	for _, f := range sr.Filters {
		filter := searcher.Filter{
			Field:     f.Field,
			Value:     f.Value,
			Operator:  f.Operator,
			Condition: f.Condition,
		}
		filters = append(filters, filter)
	}

	return filters
}

func (sr *ShopSearchRequest) GetFilterGroup() searcher.FilterGroup {
	return sr.FilterGroup
}

func (sr *ShopSearchRequest) GetOrderBy() searcher.OrderBy {
	return searcher.OrderBy{
		Field:      sr.OrderBy.Field,
		Descending: sr.OrderBy.Descending,
	}
}

func (sr *ShopSearchRequest) GetOrderBys() []searcher.OrderBy {
	orderBys := make([]searcher.OrderBy, len(sr.OrderBys))
	for i, value := range sr.OrderBys {
		orderBys[i] = searcher.OrderBy{
			Field:      value.Field,
			Descending: value.Descending,
		}
	}
	return orderBys
}

func (sr *ShopSearchRequest) GetLimit() int {
	return sr.Limit
}

func (sr *ShopSearchRequest) GetOffset() int {
	return sr.Offset
}

func (sr *ShopSearchRequest) IsSearchByID() bool {
	return sr.IsByID
}

func (sr *ShopSearchRequest) AddFilter(field ShopSearchField, value interface{}, operator searcher.FilterOperator, condition searcher.FilterCondition) {
	if len(sr.FilterGroup.Filters) > 0 || len(sr.FilterGroup.FilterGroups) > 0 {
		panic("Filters cannot be used with FilterGroups")
	}
	f := ShopSearchFilter{
		Field:     field,
		Value:     value,
		Operator:  operator,
		Condition: condition,
	}
	sr.Filters = append(sr.Filters, f)
}

func (sr *ShopSearchRequest) SetFilterGroup(fg searcher.FilterGroup) {
	if len(sr.Filters) > 0 {
		panic("FilterGroups cannot be used with Filters")
	}
	sr.FilterGroup = fg
}

func (sr *ShopSearchRequest) SetOrderBy(field ShopSearchField, isDescending bool) {
	sr.OrderBy = ShopOrderBy{
		Field:      field,
		Descending: isDescending,
	}

	// Set this primary order by as the first in the slice
	sr.OrderBys = []ShopOrderBy{sr.OrderBy}
}

func (sr *ShopSearchRequest) SetOrderBys(orderBys ...ShopOrderBy) {
	sr.OrderBys = append([]ShopOrderBy{}, orderBys...)
}

func (sr *ShopSearchRequest) GetAllFields() []string {
	return []string{
		"id",
		"shop",
		"access_token",
		"bread_api_key",
		"bread_secret_key",
		"bread_sandbox_api_key",
		"bread_sandbox_secret_key",
		"production",
		"auto_authorize",
		"create_customers",
		"auto_settle",
		"acts_as_label",
		"css",
		"css_cart",
		"manual_embed_script",
		"as_low_as",
		"enable_order_webhooks",
		"created_at",
		"updated_at",
		"allow_checkout_pdp",
		"enable_add_to_cart",
		"allow_checkout_cart",
		"oauth_permissions_up_to_date",
		"healthcare_mode",
		"targeted_financing",
		"targeted_financing_id",
		"targeted_financing_threshold",
		"draft_order_tax",
		"accelerated_checkout_permitted",
		"pos_access",
		"remainder_pay_decline_auto_cancel",
		"integration_key",
		"sandbox_integration_key",
		"production_v2",
		"active_version",
	}
}

func (sr *ShopSearchRequest) GetFields() []string {
	fields := []string{}

	for _, f := range sr.Fields {
		fields = append(fields, f.DbFieldName())
	}

	return fields
}
