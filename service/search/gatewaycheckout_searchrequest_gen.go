// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/searcher. DO NOT EDIT.

package search

import (
	"fmt"
	"strings"

	"github.com/getbread/breadkit/zeus/searcher"

	zeus "github.com/getbread/breadkit/zeus/types"
)

type GatewayCheckoutSearchField int

const (
	GatewayCheckoutSearch_Id GatewayCheckoutSearchField = iota
	GatewayCheckoutSearch_AccountID
	GatewayCheckoutSearch_TransactionID
	GatewayCheckoutSearch_Test
	GatewayCheckoutSearch_Reference
	GatewayCheckoutSearch_Currency
	GatewayCheckoutSearch_Amount
	GatewayCheckoutSearch_Completed
	GatewayCheckoutSearch_Errored
	GatewayCheckoutSearch_CreatedAt
	GatewayCheckoutSearch_UpdatedAt
	GatewayCheckoutSearch_AmountStr
	GatewayCheckoutSearch_BreadVersion
	GatewayCheckoutSearch_MerchantId
)

func (s GatewayCheckoutSearchField) MarshalText() ([]byte, error) {
	var data string

	switch s {
	case GatewayCheckoutSearch_Id:
		data = "id"
	case GatewayCheckoutSearch_AccountID:
		data = "account_id"
	case GatewayCheckoutSearch_TransactionID:
		data = "transaction_id"
	case GatewayCheckoutSearch_Test:
		data = "test"
	case GatewayCheckoutSearch_Reference:
		data = "reference"
	case GatewayCheckoutSearch_Currency:
		data = "currency"
	case GatewayCheckoutSearch_Amount:
		data = "amount"
	case GatewayCheckoutSearch_Completed:
		data = "completed"
	case GatewayCheckoutSearch_Errored:
		data = "errored"
	case GatewayCheckoutSearch_CreatedAt:
		data = "created_at"
	case GatewayCheckoutSearch_UpdatedAt:
		data = "updated_at"
	case GatewayCheckoutSearch_AmountStr:
		data = "amount_str"
	case GatewayCheckoutSearch_BreadVersion:
		data = "bread_version"
	case GatewayCheckoutSearch_MerchantId:
		data = "merchant_id"

	default:
		return nil, fmt.Errorf("Cannot marshal text '%v'", s)
	}
	return []byte(data), nil
}

func (s GatewayCheckoutSearchField) MarshalBinary() ([]byte, error) {
	var data string

	switch s {
	case GatewayCheckoutSearch_Id:
		data = "id"
	case GatewayCheckoutSearch_AccountID:
		data = "account_id"
	case GatewayCheckoutSearch_TransactionID:
		data = "transaction_id"
	case GatewayCheckoutSearch_Test:
		data = "test"
	case GatewayCheckoutSearch_Reference:
		data = "reference"
	case GatewayCheckoutSearch_Currency:
		data = "currency"
	case GatewayCheckoutSearch_Amount:
		data = "amount"
	case GatewayCheckoutSearch_Completed:
		data = "completed"
	case GatewayCheckoutSearch_Errored:
		data = "errored"
	case GatewayCheckoutSearch_CreatedAt:
		data = "created_at"
	case GatewayCheckoutSearch_UpdatedAt:
		data = "updated_at"
	case GatewayCheckoutSearch_AmountStr:
		data = "amount_str"
	case GatewayCheckoutSearch_BreadVersion:
		data = "bread_version"
	case GatewayCheckoutSearch_MerchantId:
		data = "merchant_id"

	default:
		return nil, fmt.Errorf("Cannot marshal binary '%v'", s)
	}
	return []byte(data), nil
}

func (s *GatewayCheckoutSearchField) UnmarshalText(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = GatewayCheckoutSearch_Id
	case "account_id":
		*s = GatewayCheckoutSearch_AccountID
	case "transaction_id":
		*s = GatewayCheckoutSearch_TransactionID
	case "test":
		*s = GatewayCheckoutSearch_Test
	case "reference":
		*s = GatewayCheckoutSearch_Reference
	case "currency":
		*s = GatewayCheckoutSearch_Currency
	case "amount":
		*s = GatewayCheckoutSearch_Amount
	case "completed":
		*s = GatewayCheckoutSearch_Completed
	case "errored":
		*s = GatewayCheckoutSearch_Errored
	case "created_at":
		*s = GatewayCheckoutSearch_CreatedAt
	case "updated_at":
		*s = GatewayCheckoutSearch_UpdatedAt
	case "amount_str":
		*s = GatewayCheckoutSearch_AmountStr
	case "bread_version":
		*s = GatewayCheckoutSearch_BreadVersion
	case "merchant_id":
		*s = GatewayCheckoutSearch_MerchantId

	default:
		return fmt.Errorf("Cannot unmarshal text '%s'", str)
	}
	return nil
}

func (s *GatewayCheckoutSearchField) UnmarshalBinary(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = GatewayCheckoutSearch_Id
	case "account_id":
		*s = GatewayCheckoutSearch_AccountID
	case "transaction_id":
		*s = GatewayCheckoutSearch_TransactionID
	case "test":
		*s = GatewayCheckoutSearch_Test
	case "reference":
		*s = GatewayCheckoutSearch_Reference
	case "currency":
		*s = GatewayCheckoutSearch_Currency
	case "amount":
		*s = GatewayCheckoutSearch_Amount
	case "completed":
		*s = GatewayCheckoutSearch_Completed
	case "errored":
		*s = GatewayCheckoutSearch_Errored
	case "created_at":
		*s = GatewayCheckoutSearch_CreatedAt
	case "updated_at":
		*s = GatewayCheckoutSearch_UpdatedAt
	case "amount_str":
		*s = GatewayCheckoutSearch_AmountStr
	case "bread_version":
		*s = GatewayCheckoutSearch_BreadVersion
	case "merchant_id":
		*s = GatewayCheckoutSearch_MerchantId

	default:
		return fmt.Errorf("Cannot unmarshal binary '%s'", str)
	}
	return nil
}

func (s GatewayCheckoutSearchField) DbFieldName() string {
	switch s {
	case GatewayCheckoutSearch_Id:
		return "id"
	case GatewayCheckoutSearch_AccountID:
		return "account_id"
	case GatewayCheckoutSearch_TransactionID:
		return "transaction_id"
	case GatewayCheckoutSearch_Test:
		return "test"
	case GatewayCheckoutSearch_Reference:
		return "reference"
	case GatewayCheckoutSearch_Currency:
		return "currency"
	case GatewayCheckoutSearch_Amount:
		return "amount"
	case GatewayCheckoutSearch_Completed:
		return "completed"
	case GatewayCheckoutSearch_Errored:
		return "errored"
	case GatewayCheckoutSearch_CreatedAt:
		return "created_at"
	case GatewayCheckoutSearch_UpdatedAt:
		return "updated_at"
	case GatewayCheckoutSearch_AmountStr:
		return "amount_str"
	case GatewayCheckoutSearch_BreadVersion:
		return "bread_version"
	case GatewayCheckoutSearch_MerchantId:
		return "merchant_id"

	}
	return ""
}

type GatewayCheckoutSearchRequest struct {
	searcher.SearchRequestFields

	Filters     []GatewayCheckoutSearchFilter `json:"filters"`
	FilterGroup searcher.FilterGroup          `json:"filterGroup"`
	OrderBy     GatewayCheckoutOrderBy        `json:"orderBy"`
	OrderBys    []GatewayCheckoutOrderBy      `json:"orderBys"`
	Fields      []GatewayCheckoutSearchField  `json:"fields"`
	IsByID      bool                          `json:"isById"`
}

type GatewayCheckoutSearchFilter struct {
	Field     GatewayCheckoutSearchField `json:"field"`
	Value     interface{}                `json:"value"`
	Operator  searcher.FilterOperator    `json:"operator"`
	Condition searcher.FilterCondition   `json:"condition"`
}

type GatewayCheckoutOrderBy struct {
	Field      GatewayCheckoutSearchField `json:"field"`
	Descending bool                       `json:"desc"`
}

/*
GatewayCheckoutByID constructs a GatewayCheckoutSearchRequest to pull
a GatewayCheckout by it's ID.

You can add additional options using functions.

Handlers may choose to return (*GatewayCheckout, error) by checking the
IsSearchByID() function.
*/
func GatewayCheckoutByID(ID zeus.Uuid, options ...func(*GatewayCheckoutSearchRequest)) GatewayCheckoutSearchRequest {
	var searchRequest GatewayCheckoutSearchRequest

	searchRequest.AddFilter(
		GatewayCheckoutSearch_Id,
		ID,
		searcher.Operator_EQ,
		searcher.Condition_AND)

	searchRequest.Limit = 1
	searchRequest.IsByID = true

	for _, f := range options {
		f(&searchRequest)
	}

	return searchRequest
}

// implement searcher.SearchRequest interface
func (sr *GatewayCheckoutSearchRequest) GetTableName() string {
	return "shopify_gateway_checkouts"
}

func (sr *GatewayCheckoutSearchRequest) GetFilters() []searcher.Filter {
	filters := []searcher.Filter{}

	for _, f := range sr.Filters {
		filter := searcher.Filter{
			Field:     f.Field,
			Value:     f.Value,
			Operator:  f.Operator,
			Condition: f.Condition,
		}
		filters = append(filters, filter)
	}

	return filters
}

func (sr *GatewayCheckoutSearchRequest) GetFilterGroup() searcher.FilterGroup {
	return sr.FilterGroup
}

func (sr *GatewayCheckoutSearchRequest) GetOrderBy() searcher.OrderBy {
	return searcher.OrderBy{
		Field:      sr.OrderBy.Field,
		Descending: sr.OrderBy.Descending,
	}
}

func (sr *GatewayCheckoutSearchRequest) GetOrderBys() []searcher.OrderBy {
	orderBys := make([]searcher.OrderBy, len(sr.OrderBys))
	for i, value := range sr.OrderBys {
		orderBys[i] = searcher.OrderBy{
			Field:      value.Field,
			Descending: value.Descending,
		}
	}
	return orderBys
}

func (sr *GatewayCheckoutSearchRequest) GetLimit() int {
	return sr.Limit
}

func (sr *GatewayCheckoutSearchRequest) GetOffset() int {
	return sr.Offset
}

func (sr *GatewayCheckoutSearchRequest) IsSearchByID() bool {
	return sr.IsByID
}

func (sr *GatewayCheckoutSearchRequest) AddFilter(field GatewayCheckoutSearchField, value interface{}, operator searcher.FilterOperator, condition searcher.FilterCondition) {
	if len(sr.FilterGroup.Filters) > 0 || len(sr.FilterGroup.FilterGroups) > 0 {
		panic("Filters cannot be used with FilterGroups")
	}
	f := GatewayCheckoutSearchFilter{
		Field:     field,
		Value:     value,
		Operator:  operator,
		Condition: condition,
	}
	sr.Filters = append(sr.Filters, f)
}

func (sr *GatewayCheckoutSearchRequest) SetFilterGroup(fg searcher.FilterGroup) {
	if len(sr.Filters) > 0 {
		panic("FilterGroups cannot be used with Filters")
	}
	sr.FilterGroup = fg
}

func (sr *GatewayCheckoutSearchRequest) SetOrderBy(field GatewayCheckoutSearchField, isDescending bool) {
	sr.OrderBy = GatewayCheckoutOrderBy{
		Field:      field,
		Descending: isDescending,
	}

	// Set this primary order by as the first in the slice
	sr.OrderBys = []GatewayCheckoutOrderBy{sr.OrderBy}
}

func (sr *GatewayCheckoutSearchRequest) SetOrderBys(orderBys ...GatewayCheckoutOrderBy) {
	sr.OrderBys = append([]GatewayCheckoutOrderBy{}, orderBys...)
}

func (sr *GatewayCheckoutSearchRequest) GetAllFields() []string {
	return []string{
		"id",
		"account_id",
		"transaction_id",
		"test",
		"reference",
		"currency",
		"amount",
		"callback_url",
		"complete_url",
		"cancel_url",
		"completed",
		"errored",
		"created_at",
		"updated_at",
		"amount_str",
		"bread_version",
		"merchant_id",
	}
}

func (sr *GatewayCheckoutSearchRequest) GetFields() []string {
	fields := []string{}

	for _, f := range sr.Fields {
		fields = append(fields, f.DbFieldName())
	}

	return fields
}
