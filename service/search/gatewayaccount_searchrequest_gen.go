// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/searcher. DO NOT EDIT.

package search

import (
	"fmt"
	"strings"

	"github.com/getbread/breadkit/zeus/searcher"

	zeus "github.com/getbread/breadkit/zeus/types"
)

type GatewayAccountSearchField int

const (
	GatewayAccountSearch_Id GatewayAccountSearchField = iota
	GatewayAccountSearch_Email
	GatewayAccountSearch_PasswordHash
	GatewayAccountSearch_GatewayKey
	GatewayAccountSearch_GatewaySecret
	GatewayAccountSearch_ApiKey
	GatewayAccountSearch_SharedSecret
	GatewayAccountSearch_SandboxApiKey
	GatewayAccountSearch_SandboxSharedSecret
	GatewayAccountSearch_AutoSettle
	GatewayAccountSearch_HealthcareMode
	GatewayAccountSearch_CreatedAt
	GatewayAccountSearch_UpdatedAt
	GatewayAccountSearch_PlatformApiKey
	GatewayAccountSearch_PlatformSharedSecret
	GatewayAccountSearch_PlatformSandboxApiKey
	GatewayAccountSearch_PlatformSandboxSharedSecret
	GatewayAccountSearch_IntegrationKey
	GatewayAccountSearch_SandboxIntegrationKey
	GatewayAccountSearch_PlatformAutoSettle
	GatewayAccountSearch_ActiveVersion
)

func (s GatewayAccountSearchField) MarshalText() ([]byte, error) {
	var data string

	switch s {
	case GatewayAccountSearch_Id:
		data = "id"
	case GatewayAccountSearch_Email:
		data = "email"
	case GatewayAccountSearch_PasswordHash:
		data = "_"
	case GatewayAccountSearch_GatewayKey:
		data = "gatewayKey"
	case GatewayAccountSearch_GatewaySecret:
		data = "gatewaySecret"
	case GatewayAccountSearch_ApiKey:
		data = "apiKey"
	case GatewayAccountSearch_SharedSecret:
		data = "sharedSecret"
	case GatewayAccountSearch_SandboxApiKey:
		data = "sandboxApiKey"
	case GatewayAccountSearch_SandboxSharedSecret:
		data = "sandboxSharedSecret"
	case GatewayAccountSearch_AutoSettle:
		data = "autoSettle"
	case GatewayAccountSearch_HealthcareMode:
		data = "healthcareMode"
	case GatewayAccountSearch_CreatedAt:
		data = "createdAt"
	case GatewayAccountSearch_UpdatedAt:
		data = "updatedAt"
	case GatewayAccountSearch_PlatformApiKey:
		data = "platformApiKey"
	case GatewayAccountSearch_PlatformSharedSecret:
		data = "platformSharedSecret"
	case GatewayAccountSearch_PlatformSandboxApiKey:
		data = "platformSandboxApiKey"
	case GatewayAccountSearch_PlatformSandboxSharedSecret:
		data = "platformSandboxSharedSecret"
	case GatewayAccountSearch_IntegrationKey:
		data = "integrationKey"
	case GatewayAccountSearch_SandboxIntegrationKey:
		data = "sandboxIntegrationKey"
	case GatewayAccountSearch_PlatformAutoSettle:
		data = "platformAutoSettle"
	case GatewayAccountSearch_ActiveVersion:
		data = "activeVersion"

	default:
		return nil, fmt.Errorf("Cannot marshal text '%v'", s)
	}
	return []byte(data), nil
}

func (s GatewayAccountSearchField) MarshalBinary() ([]byte, error) {
	var data string

	switch s {
	case GatewayAccountSearch_Id:
		data = "id"
	case GatewayAccountSearch_Email:
		data = "email"
	case GatewayAccountSearch_PasswordHash:
		data = "_"
	case GatewayAccountSearch_GatewayKey:
		data = "gatewayKey"
	case GatewayAccountSearch_GatewaySecret:
		data = "gatewaySecret"
	case GatewayAccountSearch_ApiKey:
		data = "apiKey"
	case GatewayAccountSearch_SharedSecret:
		data = "sharedSecret"
	case GatewayAccountSearch_SandboxApiKey:
		data = "sandboxApiKey"
	case GatewayAccountSearch_SandboxSharedSecret:
		data = "sandboxSharedSecret"
	case GatewayAccountSearch_AutoSettle:
		data = "autoSettle"
	case GatewayAccountSearch_HealthcareMode:
		data = "healthcareMode"
	case GatewayAccountSearch_CreatedAt:
		data = "createdAt"
	case GatewayAccountSearch_UpdatedAt:
		data = "updatedAt"
	case GatewayAccountSearch_PlatformApiKey:
		data = "platformApiKey"
	case GatewayAccountSearch_PlatformSharedSecret:
		data = "platformSharedSecret"
	case GatewayAccountSearch_PlatformSandboxApiKey:
		data = "platformSandboxApiKey"
	case GatewayAccountSearch_PlatformSandboxSharedSecret:
		data = "platformSandboxSharedSecret"
	case GatewayAccountSearch_IntegrationKey:
		data = "integrationKey"
	case GatewayAccountSearch_SandboxIntegrationKey:
		data = "sandboxIntegrationKey"
	case GatewayAccountSearch_PlatformAutoSettle:
		data = "platformAutoSettle"
	case GatewayAccountSearch_ActiveVersion:
		data = "activeVersion"

	default:
		return nil, fmt.Errorf("Cannot marshal binary '%v'", s)
	}
	return []byte(data), nil
}

func (s *GatewayAccountSearchField) UnmarshalText(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = GatewayAccountSearch_Id
	case "email":
		*s = GatewayAccountSearch_Email
	case "_":
		*s = GatewayAccountSearch_PasswordHash
	case "gatewayKey":
		*s = GatewayAccountSearch_GatewayKey
	case "gatewaySecret":
		*s = GatewayAccountSearch_GatewaySecret
	case "apiKey":
		*s = GatewayAccountSearch_ApiKey
	case "sharedSecret":
		*s = GatewayAccountSearch_SharedSecret
	case "sandboxApiKey":
		*s = GatewayAccountSearch_SandboxApiKey
	case "sandboxSharedSecret":
		*s = GatewayAccountSearch_SandboxSharedSecret
	case "autoSettle":
		*s = GatewayAccountSearch_AutoSettle
	case "healthcareMode":
		*s = GatewayAccountSearch_HealthcareMode
	case "createdAt":
		*s = GatewayAccountSearch_CreatedAt
	case "updatedAt":
		*s = GatewayAccountSearch_UpdatedAt
	case "platformApiKey":
		*s = GatewayAccountSearch_PlatformApiKey
	case "platformSharedSecret":
		*s = GatewayAccountSearch_PlatformSharedSecret
	case "platformSandboxApiKey":
		*s = GatewayAccountSearch_PlatformSandboxApiKey
	case "platformSandboxSharedSecret":
		*s = GatewayAccountSearch_PlatformSandboxSharedSecret
	case "integrationKey":
		*s = GatewayAccountSearch_IntegrationKey
	case "sandboxIntegrationKey":
		*s = GatewayAccountSearch_SandboxIntegrationKey
	case "platformAutoSettle":
		*s = GatewayAccountSearch_PlatformAutoSettle
	case "activeVersion":
		*s = GatewayAccountSearch_ActiveVersion

	default:
		return fmt.Errorf("Cannot unmarshal text '%s'", str)
	}
	return nil
}

func (s *GatewayAccountSearchField) UnmarshalBinary(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = GatewayAccountSearch_Id
	case "email":
		*s = GatewayAccountSearch_Email
	case "_":
		*s = GatewayAccountSearch_PasswordHash
	case "gatewayKey":
		*s = GatewayAccountSearch_GatewayKey
	case "gatewaySecret":
		*s = GatewayAccountSearch_GatewaySecret
	case "apiKey":
		*s = GatewayAccountSearch_ApiKey
	case "sharedSecret":
		*s = GatewayAccountSearch_SharedSecret
	case "sandboxApiKey":
		*s = GatewayAccountSearch_SandboxApiKey
	case "sandboxSharedSecret":
		*s = GatewayAccountSearch_SandboxSharedSecret
	case "autoSettle":
		*s = GatewayAccountSearch_AutoSettle
	case "healthcareMode":
		*s = GatewayAccountSearch_HealthcareMode
	case "createdAt":
		*s = GatewayAccountSearch_CreatedAt
	case "updatedAt":
		*s = GatewayAccountSearch_UpdatedAt
	case "platformApiKey":
		*s = GatewayAccountSearch_PlatformApiKey
	case "platformSharedSecret":
		*s = GatewayAccountSearch_PlatformSharedSecret
	case "platformSandboxApiKey":
		*s = GatewayAccountSearch_PlatformSandboxApiKey
	case "platformSandboxSharedSecret":
		*s = GatewayAccountSearch_PlatformSandboxSharedSecret
	case "integrationKey":
		*s = GatewayAccountSearch_IntegrationKey
	case "sandboxIntegrationKey":
		*s = GatewayAccountSearch_SandboxIntegrationKey
	case "platformAutoSettle":
		*s = GatewayAccountSearch_PlatformAutoSettle
	case "activeVersion":
		*s = GatewayAccountSearch_ActiveVersion

	default:
		return fmt.Errorf("Cannot unmarshal binary '%s'", str)
	}
	return nil
}

func (s GatewayAccountSearchField) DbFieldName() string {
	switch s {
	case GatewayAccountSearch_Id:
		return "id"
	case GatewayAccountSearch_Email:
		return "email"
	case GatewayAccountSearch_PasswordHash:
		return "password_hash"
	case GatewayAccountSearch_GatewayKey:
		return "gateway_key"
	case GatewayAccountSearch_GatewaySecret:
		return "gateway_secret"
	case GatewayAccountSearch_ApiKey:
		return "api_key"
	case GatewayAccountSearch_SharedSecret:
		return "shared_secret"
	case GatewayAccountSearch_SandboxApiKey:
		return "sandbox_api_key"
	case GatewayAccountSearch_SandboxSharedSecret:
		return "sandbox_shared_secret"
	case GatewayAccountSearch_AutoSettle:
		return "auto_settle"
	case GatewayAccountSearch_HealthcareMode:
		return "healthcare_mode"
	case GatewayAccountSearch_CreatedAt:
		return "created_at"
	case GatewayAccountSearch_UpdatedAt:
		return "updated_at"
	case GatewayAccountSearch_PlatformApiKey:
		return "api_key_v2"
	case GatewayAccountSearch_PlatformSharedSecret:
		return "shared_secret_v2"
	case GatewayAccountSearch_PlatformSandboxApiKey:
		return "sandbox_api_key_v2"
	case GatewayAccountSearch_PlatformSandboxSharedSecret:
		return "sandbox_shared_secret_v2"
	case GatewayAccountSearch_IntegrationKey:
		return "integration_key"
	case GatewayAccountSearch_SandboxIntegrationKey:
		return "sandbox_integration_key"
	case GatewayAccountSearch_PlatformAutoSettle:
		return "auto_settle_v2"
	case GatewayAccountSearch_ActiveVersion:
		return "active_version"

	}
	return ""
}

type GatewayAccountSearchRequest struct {
	searcher.SearchRequestFields

	Filters     []GatewayAccountSearchFilter `json:"filters"`
	FilterGroup searcher.FilterGroup         `json:"filterGroup"`
	OrderBy     GatewayAccountOrderBy        `json:"orderBy"`
	OrderBys    []GatewayAccountOrderBy      `json:"orderBys"`
	Fields      []GatewayAccountSearchField  `json:"fields"`
	IsByID      bool                         `json:"isById"`
}

type GatewayAccountSearchFilter struct {
	Field     GatewayAccountSearchField `json:"field"`
	Value     interface{}               `json:"value"`
	Operator  searcher.FilterOperator   `json:"operator"`
	Condition searcher.FilterCondition  `json:"condition"`
}

type GatewayAccountOrderBy struct {
	Field      GatewayAccountSearchField `json:"field"`
	Descending bool                      `json:"desc"`
}

/*
GatewayAccountByID constructs a GatewayAccountSearchRequest to pull
a GatewayAccount by it's ID.

You can add additional options using functions.

Handlers may choose to return (*GatewayAccount, error) by checking the
IsSearchByID() function.
*/
func GatewayAccountByID(ID zeus.Uuid, options ...func(*GatewayAccountSearchRequest)) GatewayAccountSearchRequest {
	var searchRequest GatewayAccountSearchRequest

	searchRequest.AddFilter(
		GatewayAccountSearch_Id,
		ID,
		searcher.Operator_EQ,
		searcher.Condition_AND)

	searchRequest.Limit = 1
	searchRequest.IsByID = true

	for _, f := range options {
		f(&searchRequest)
	}

	return searchRequest
}

// implement searcher.SearchRequest interface
func (sr *GatewayAccountSearchRequest) GetTableName() string {
	return "shopify_gateway_accounts"
}

func (sr *GatewayAccountSearchRequest) GetFilters() []searcher.Filter {
	filters := []searcher.Filter{}

	for _, f := range sr.Filters {
		filter := searcher.Filter{
			Field:     f.Field,
			Value:     f.Value,
			Operator:  f.Operator,
			Condition: f.Condition,
		}
		filters = append(filters, filter)
	}

	return filters
}

func (sr *GatewayAccountSearchRequest) GetFilterGroup() searcher.FilterGroup {
	return sr.FilterGroup
}

func (sr *GatewayAccountSearchRequest) GetOrderBy() searcher.OrderBy {
	return searcher.OrderBy{
		Field:      sr.OrderBy.Field,
		Descending: sr.OrderBy.Descending,
	}
}

func (sr *GatewayAccountSearchRequest) GetOrderBys() []searcher.OrderBy {
	orderBys := make([]searcher.OrderBy, len(sr.OrderBys))
	for i, value := range sr.OrderBys {
		orderBys[i] = searcher.OrderBy{
			Field:      value.Field,
			Descending: value.Descending,
		}
	}
	return orderBys
}

func (sr *GatewayAccountSearchRequest) GetLimit() int {
	return sr.Limit
}

func (sr *GatewayAccountSearchRequest) GetOffset() int {
	return sr.Offset
}

func (sr *GatewayAccountSearchRequest) IsSearchByID() bool {
	return sr.IsByID
}

func (sr *GatewayAccountSearchRequest) AddFilter(field GatewayAccountSearchField, value interface{}, operator searcher.FilterOperator, condition searcher.FilterCondition) {
	if len(sr.FilterGroup.Filters) > 0 || len(sr.FilterGroup.FilterGroups) > 0 {
		panic("Filters cannot be used with FilterGroups")
	}
	f := GatewayAccountSearchFilter{
		Field:     field,
		Value:     value,
		Operator:  operator,
		Condition: condition,
	}
	sr.Filters = append(sr.Filters, f)
}

func (sr *GatewayAccountSearchRequest) SetFilterGroup(fg searcher.FilterGroup) {
	if len(sr.Filters) > 0 {
		panic("FilterGroups cannot be used with Filters")
	}
	sr.FilterGroup = fg
}

func (sr *GatewayAccountSearchRequest) SetOrderBy(field GatewayAccountSearchField, isDescending bool) {
	sr.OrderBy = GatewayAccountOrderBy{
		Field:      field,
		Descending: isDescending,
	}

	// Set this primary order by as the first in the slice
	sr.OrderBys = []GatewayAccountOrderBy{sr.OrderBy}
}

func (sr *GatewayAccountSearchRequest) SetOrderBys(orderBys ...GatewayAccountOrderBy) {
	sr.OrderBys = append([]GatewayAccountOrderBy{}, orderBys...)
}

func (sr *GatewayAccountSearchRequest) GetAllFields() []string {
	return []string{
		"id",
		"email",
		"password_hash",
		"gateway_key",
		"gateway_secret",
		"api_key",
		"shared_secret",
		"sandbox_api_key",
		"sandbox_shared_secret",
		"auto_settle",
		"healthcare_mode",
		"targeted_financing",
		"targeted_financing_id",
		"targeted_financing_threshold",
		"plus_embedded_checkout",
		"production",
		"created_at",
		"updated_at",
		"remainder_pay_decline_auto_cancel",
		"api_key_v2",
		"shared_secret_v2",
		"sandbox_api_key_v2",
		"sandbox_shared_secret_v2",
		"integration_key",
		"sandbox_integration_key",
		"auto_settle_v2",
		"active_version",
	}
}

func (sr *GatewayAccountSearchRequest) GetFields() []string {
	fields := []string{}

	for _, f := range sr.Fields {
		fields = append(fields, f.DbFieldName())
	}

	return fields
}
