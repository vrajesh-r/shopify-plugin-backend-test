// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/searcher. DO NOT EDIT.

package search

import (
	"fmt"
	"strings"

	"github.com/getbread/breadkit/zeus/searcher"

	zeus "github.com/getbread/breadkit/zeus/types"
)

type AnalyticsOrderSearchField int

const (
	AnalyticsOrderSearch_ID AnalyticsOrderSearchField = iota
	AnalyticsOrderSearch_ShopName
	AnalyticsOrderSearch_OrderID
	AnalyticsOrderSearch_CustomerID
	AnalyticsOrderSearch_CustomerEmail
	AnalyticsOrderSearch_TotalPrice
	AnalyticsOrderSearch_Gateway
	AnalyticsOrderSearch_FinancialStatus
	AnalyticsOrderSearch_FulfillmentStatus
	AnalyticsOrderSearch_Test
	AnalyticsOrderSearch_Redacted
	AnalyticsOrderSearch_CreatedAt
	AnalyticsOrderSearch_UpdatedAt
	AnalyticsOrderSearch_CheckoutID
	AnalyticsOrderSearch_CheckoutToken
)

func (s AnalyticsOrderSearchField) MarshalText() ([]byte, error) {
	var data string

	switch s {
	case AnalyticsOrderSearch_ID:
		data = "id"
	case AnalyticsOrderSearch_ShopName:
		data = "shopName"
	case AnalyticsOrderSearch_OrderID:
		data = "orderID"
	case AnalyticsOrderSearch_CustomerID:
		data = "customerID"
	case AnalyticsOrderSearch_CustomerEmail:
		data = "customerEmail"
	case AnalyticsOrderSearch_TotalPrice:
		data = "totalPrice"
	case AnalyticsOrderSearch_Gateway:
		data = "gateway"
	case AnalyticsOrderSearch_FinancialStatus:
		data = "financialStatus"
	case AnalyticsOrderSearch_FulfillmentStatus:
		data = "fulfillmentStatus"
	case AnalyticsOrderSearch_Test:
		data = "test"
	case AnalyticsOrderSearch_Redacted:
		data = "redacted"
	case AnalyticsOrderSearch_CreatedAt:
		data = "createdAt"
	case AnalyticsOrderSearch_UpdatedAt:
		data = "updatedAt"
	case AnalyticsOrderSearch_CheckoutID:
		data = "checkoutID"
	case AnalyticsOrderSearch_CheckoutToken:
		data = "checkoutToken"

	default:
		return nil, fmt.Errorf("Cannot marshal text '%v'", s)
	}
	return []byte(data), nil
}

func (s AnalyticsOrderSearchField) MarshalBinary() ([]byte, error) {
	var data string

	switch s {
	case AnalyticsOrderSearch_ID:
		data = "id"
	case AnalyticsOrderSearch_ShopName:
		data = "shopName"
	case AnalyticsOrderSearch_OrderID:
		data = "orderID"
	case AnalyticsOrderSearch_CustomerID:
		data = "customerID"
	case AnalyticsOrderSearch_CustomerEmail:
		data = "customerEmail"
	case AnalyticsOrderSearch_TotalPrice:
		data = "totalPrice"
	case AnalyticsOrderSearch_Gateway:
		data = "gateway"
	case AnalyticsOrderSearch_FinancialStatus:
		data = "financialStatus"
	case AnalyticsOrderSearch_FulfillmentStatus:
		data = "fulfillmentStatus"
	case AnalyticsOrderSearch_Test:
		data = "test"
	case AnalyticsOrderSearch_Redacted:
		data = "redacted"
	case AnalyticsOrderSearch_CreatedAt:
		data = "createdAt"
	case AnalyticsOrderSearch_UpdatedAt:
		data = "updatedAt"
	case AnalyticsOrderSearch_CheckoutID:
		data = "checkoutID"
	case AnalyticsOrderSearch_CheckoutToken:
		data = "checkoutToken"

	default:
		return nil, fmt.Errorf("Cannot marshal binary '%v'", s)
	}
	return []byte(data), nil
}

func (s *AnalyticsOrderSearchField) UnmarshalText(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = AnalyticsOrderSearch_ID
	case "shopName":
		*s = AnalyticsOrderSearch_ShopName
	case "orderID":
		*s = AnalyticsOrderSearch_OrderID
	case "customerID":
		*s = AnalyticsOrderSearch_CustomerID
	case "customerEmail":
		*s = AnalyticsOrderSearch_CustomerEmail
	case "totalPrice":
		*s = AnalyticsOrderSearch_TotalPrice
	case "gateway":
		*s = AnalyticsOrderSearch_Gateway
	case "financialStatus":
		*s = AnalyticsOrderSearch_FinancialStatus
	case "fulfillmentStatus":
		*s = AnalyticsOrderSearch_FulfillmentStatus
	case "test":
		*s = AnalyticsOrderSearch_Test
	case "redacted":
		*s = AnalyticsOrderSearch_Redacted
	case "createdAt":
		*s = AnalyticsOrderSearch_CreatedAt
	case "updatedAt":
		*s = AnalyticsOrderSearch_UpdatedAt
	case "checkoutID":
		*s = AnalyticsOrderSearch_CheckoutID
	case "checkoutToken":
		*s = AnalyticsOrderSearch_CheckoutToken

	default:
		return fmt.Errorf("Cannot unmarshal text '%s'", str)
	}
	return nil
}

func (s *AnalyticsOrderSearchField) UnmarshalBinary(b []byte) error {
	str := strings.Trim(string(b), `"`)

	switch str {
	case "id":
		*s = AnalyticsOrderSearch_ID
	case "shopName":
		*s = AnalyticsOrderSearch_ShopName
	case "orderID":
		*s = AnalyticsOrderSearch_OrderID
	case "customerID":
		*s = AnalyticsOrderSearch_CustomerID
	case "customerEmail":
		*s = AnalyticsOrderSearch_CustomerEmail
	case "totalPrice":
		*s = AnalyticsOrderSearch_TotalPrice
	case "gateway":
		*s = AnalyticsOrderSearch_Gateway
	case "financialStatus":
		*s = AnalyticsOrderSearch_FinancialStatus
	case "fulfillmentStatus":
		*s = AnalyticsOrderSearch_FulfillmentStatus
	case "test":
		*s = AnalyticsOrderSearch_Test
	case "redacted":
		*s = AnalyticsOrderSearch_Redacted
	case "createdAt":
		*s = AnalyticsOrderSearch_CreatedAt
	case "updatedAt":
		*s = AnalyticsOrderSearch_UpdatedAt
	case "checkoutID":
		*s = AnalyticsOrderSearch_CheckoutID
	case "checkoutToken":
		*s = AnalyticsOrderSearch_CheckoutToken

	default:
		return fmt.Errorf("Cannot unmarshal binary '%s'", str)
	}
	return nil
}

func (s AnalyticsOrderSearchField) DbFieldName() string {
	switch s {
	case AnalyticsOrderSearch_ID:
		return "id"
	case AnalyticsOrderSearch_ShopName:
		return "shop_name"
	case AnalyticsOrderSearch_OrderID:
		return "order_id"
	case AnalyticsOrderSearch_CustomerID:
		return "customer_id"
	case AnalyticsOrderSearch_CustomerEmail:
		return "customer_email"
	case AnalyticsOrderSearch_TotalPrice:
		return "total_price"
	case AnalyticsOrderSearch_Gateway:
		return "gateway"
	case AnalyticsOrderSearch_FinancialStatus:
		return "financial_status"
	case AnalyticsOrderSearch_FulfillmentStatus:
		return "fulfillment_status"
	case AnalyticsOrderSearch_Test:
		return "test"
	case AnalyticsOrderSearch_Redacted:
		return "redacted"
	case AnalyticsOrderSearch_CreatedAt:
		return "created_at"
	case AnalyticsOrderSearch_UpdatedAt:
		return "updated_at"
	case AnalyticsOrderSearch_CheckoutID:
		return "checkout_id"
	case AnalyticsOrderSearch_CheckoutToken:
		return "checkout_token"

	}
	return ""
}

type AnalyticsOrderSearchRequest struct {
	searcher.SearchRequestFields

	Filters     []AnalyticsOrderSearchFilter `json:"filters"`
	FilterGroup searcher.FilterGroup         `json:"filterGroup"`
	OrderBy     AnalyticsOrderOrderBy        `json:"orderBy"`
	OrderBys    []AnalyticsOrderOrderBy      `json:"orderBys"`
	Fields      []AnalyticsOrderSearchField  `json:"fields"`
	IsByID      bool                         `json:"isById"`
}

type AnalyticsOrderSearchFilter struct {
	Field     AnalyticsOrderSearchField `json:"field"`
	Value     interface{}               `json:"value"`
	Operator  searcher.FilterOperator   `json:"operator"`
	Condition searcher.FilterCondition  `json:"condition"`
}

type AnalyticsOrderOrderBy struct {
	Field      AnalyticsOrderSearchField `json:"field"`
	Descending bool                      `json:"desc"`
}

/*
AnalyticsOrderByID constructs a AnalyticsOrderSearchRequest to pull
a AnalyticsOrder by it's ID.

You can add additional options using functions.

Handlers may choose to return (*AnalyticsOrder, error) by checking the
IsSearchByID() function.
*/
func AnalyticsOrderByID(ID zeus.Uuid, options ...func(*AnalyticsOrderSearchRequest)) AnalyticsOrderSearchRequest {
	var searchRequest AnalyticsOrderSearchRequest

	searchRequest.AddFilter(
		AnalyticsOrderSearch_ID,
		ID,
		searcher.Operator_EQ,
		searcher.Condition_AND)

	searchRequest.Limit = 1
	searchRequest.IsByID = true

	for _, f := range options {
		f(&searchRequest)
	}

	return searchRequest
}

// implement searcher.SearchRequest interface
func (sr *AnalyticsOrderSearchRequest) GetTableName() string {
	return "shopify_analytics_orders"
}

func (sr *AnalyticsOrderSearchRequest) GetFilters() []searcher.Filter {
	filters := []searcher.Filter{}

	for _, f := range sr.Filters {
		filter := searcher.Filter{
			Field:     f.Field,
			Value:     f.Value,
			Operator:  f.Operator,
			Condition: f.Condition,
		}
		filters = append(filters, filter)
	}

	return filters
}

func (sr *AnalyticsOrderSearchRequest) GetFilterGroup() searcher.FilterGroup {
	return sr.FilterGroup
}

func (sr *AnalyticsOrderSearchRequest) GetOrderBy() searcher.OrderBy {
	return searcher.OrderBy{
		Field:      sr.OrderBy.Field,
		Descending: sr.OrderBy.Descending,
	}
}

func (sr *AnalyticsOrderSearchRequest) GetOrderBys() []searcher.OrderBy {
	orderBys := make([]searcher.OrderBy, len(sr.OrderBys))
	for i, value := range sr.OrderBys {
		orderBys[i] = searcher.OrderBy{
			Field:      value.Field,
			Descending: value.Descending,
		}
	}
	return orderBys
}

func (sr *AnalyticsOrderSearchRequest) GetLimit() int {
	return sr.Limit
}

func (sr *AnalyticsOrderSearchRequest) GetOffset() int {
	return sr.Offset
}

func (sr *AnalyticsOrderSearchRequest) IsSearchByID() bool {
	return sr.IsByID
}

func (sr *AnalyticsOrderSearchRequest) AddFilter(field AnalyticsOrderSearchField, value interface{}, operator searcher.FilterOperator, condition searcher.FilterCondition) {
	if len(sr.FilterGroup.Filters) > 0 || len(sr.FilterGroup.FilterGroups) > 0 {
		panic("Filters cannot be used with FilterGroups")
	}
	f := AnalyticsOrderSearchFilter{
		Field:     field,
		Value:     value,
		Operator:  operator,
		Condition: condition,
	}
	sr.Filters = append(sr.Filters, f)
}

func (sr *AnalyticsOrderSearchRequest) SetFilterGroup(fg searcher.FilterGroup) {
	if len(sr.Filters) > 0 {
		panic("FilterGroups cannot be used with Filters")
	}
	sr.FilterGroup = fg
}

func (sr *AnalyticsOrderSearchRequest) SetOrderBy(field AnalyticsOrderSearchField, isDescending bool) {
	sr.OrderBy = AnalyticsOrderOrderBy{
		Field:      field,
		Descending: isDescending,
	}

	// Set this primary order by as the first in the slice
	sr.OrderBys = []AnalyticsOrderOrderBy{sr.OrderBy}
}

func (sr *AnalyticsOrderSearchRequest) SetOrderBys(orderBys ...AnalyticsOrderOrderBy) {
	sr.OrderBys = append([]AnalyticsOrderOrderBy{}, orderBys...)
}

func (sr *AnalyticsOrderSearchRequest) GetAllFields() []string {
	return []string{
		"id",
		"shop_name",
		"order_id",
		"customer_id",
		"customer_email",
		"total_price",
		"gateway",
		"financial_status",
		"fulfillment_status",
		"test",
		"redacted",
		"created_at",
		"updated_at",
		"checkout_id",
		"checkout_token",
	}
}

func (sr *AnalyticsOrderSearchRequest) GetFields() []string {
	fields := []string{}

	for _, f := range sr.Fields {
		fields = append(fields, f.DbFieldName())
	}

	return fields
}
