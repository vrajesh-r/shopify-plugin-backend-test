// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	bread "github.com/getbread/shopify_plugin_backend/service/bread"
	mock "github.com/stretchr/testify/mock"
)

// IBreadClient is an autogenerated mock type for the IBreadClient type
type IBreadClient struct {
	mock.Mock
}

// ApiRequest provides a mock function with given fields: method, url, body, r
func (_m *IBreadClient) ApiRequest(method string, url string, body []byte, r interface{}) error {
	ret := _m.Called(method, url, body, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte, interface{}) error); ok {
		r0 = rf(method, url, body, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthorizeTransaction provides a mock function with given fields: txId, ostiaHost, tar
func (_m *IBreadClient) AuthorizeTransaction(txId string, ostiaHost string, tar *bread.TransactionActionRequest) (*bread.TransactionResponse, error) {
	ret := _m.Called(txId, ostiaHost, tar)

	var r0 *bread.TransactionResponse
	if rf, ok := ret.Get(0).(func(string, string, *bread.TransactionActionRequest) *bread.TransactionResponse); ok {
		r0 = rf(txId, ostiaHost, tar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bread.TransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *bread.TransactionActionRequest) error); ok {
		r1 = rf(txId, ostiaHost, tar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelTransaction provides a mock function with given fields: txId, ostiaHost, tar
func (_m *IBreadClient) CancelTransaction(txId string, ostiaHost string, tar *bread.TransactionActionRequest) (*bread.TransactionResponse, error) {
	ret := _m.Called(txId, ostiaHost, tar)

	var r0 *bread.TransactionResponse
	if rf, ok := ret.Get(0).(func(string, string, *bread.TransactionActionRequest) *bread.TransactionResponse); ok {
		r0 = rf(txId, ostiaHost, tar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bread.TransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *bread.TransactionActionRequest) error); ok {
		r1 = rf(txId, ostiaHost, tar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpireCart provides a mock function with given fields: ostiaHost, cartID
func (_m *IBreadClient) ExpireCart(ostiaHost string, cartID string) error {
	ret := _m.Called(ostiaHost, cartID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(ostiaHost, cartID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryTransaction provides a mock function with given fields: txId, ostiaHost
func (_m *IBreadClient) QueryTransaction(txId string, ostiaHost string) (*bread.TransactionResponse, error) {
	ret := _m.Called(txId, ostiaHost)

	var r0 *bread.TransactionResponse
	if rf, ok := ret.Get(0).(func(string, string) *bread.TransactionResponse); ok {
		r0 = rf(txId, ostiaHost)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bread.TransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(txId, ostiaHost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefundTransaction provides a mock function with given fields: txId, ostiaHost, tar
func (_m *IBreadClient) RefundTransaction(txId string, ostiaHost string, tar *bread.TransactionActionRequest) (*bread.TransactionResponse, error) {
	ret := _m.Called(txId, ostiaHost, tar)

	var r0 *bread.TransactionResponse
	if rf, ok := ret.Get(0).(func(string, string, *bread.TransactionActionRequest) *bread.TransactionResponse); ok {
		r0 = rf(txId, ostiaHost, tar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bread.TransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *bread.TransactionActionRequest) error); ok {
		r1 = rf(txId, ostiaHost, tar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCart provides a mock function with given fields: ostiaHost, cart
func (_m *IBreadClient) SaveCart(ostiaHost string, cart *bread.Cart) (*bread.Cart, error) {
	ret := _m.Called(ostiaHost, cart)

	var r0 *bread.Cart
	if rf, ok := ret.Get(0).(func(string, *bread.Cart) *bread.Cart); ok {
		r0 = rf(ostiaHost, cart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bread.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *bread.Cart) error); ok {
		r1 = rf(ostiaHost, cart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCartEmail provides a mock function with given fields: ostiaHost, cartID, req
func (_m *IBreadClient) SendCartEmail(ostiaHost string, cartID string, req bread.SendCartEmailRequest) error {
	ret := _m.Called(ostiaHost, cartID, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bread.SendCartEmailRequest) error); ok {
		r0 = rf(ostiaHost, cartID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendCartText provides a mock function with given fields: ostiaHost, cartID, req
func (_m *IBreadClient) SendCartText(ostiaHost string, cartID string, req bread.SendCartTextRequest) error {
	ret := _m.Called(ostiaHost, cartID, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bread.SendCartTextRequest) error); ok {
		r0 = rf(ostiaHost, cartID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetShippingDetails provides a mock function with given fields: transactionID, ostiaHost, req
func (_m *IBreadClient) SetShippingDetails(transactionID string, ostiaHost string, req bread.TransactionShipmentRequest) (*bread.TransactionResponse, error) {
	ret := _m.Called(transactionID, ostiaHost, req)

	var r0 *bread.TransactionResponse
	if rf, ok := ret.Get(0).(func(string, string, bread.TransactionShipmentRequest) *bread.TransactionResponse); ok {
		r0 = rf(transactionID, ostiaHost, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bread.TransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bread.TransactionShipmentRequest) error); ok {
		r1 = rf(transactionID, ostiaHost, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SettleTransaction provides a mock function with given fields: txId, ostiaHost, tar
func (_m *IBreadClient) SettleTransaction(txId string, ostiaHost string, tar *bread.TransactionActionRequest) (*bread.TransactionResponse, error) {
	ret := _m.Called(txId, ostiaHost, tar)

	var r0 *bread.TransactionResponse
	if rf, ok := ret.Get(0).(func(string, string, *bread.TransactionActionRequest) *bread.TransactionResponse); ok {
		r0 = rf(txId, ostiaHost, tar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bread.TransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *bread.TransactionActionRequest) error); ok {
		r1 = rf(txId, ostiaHost, tar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransaction provides a mock function with given fields: txId, ostiaHost, tar
func (_m *IBreadClient) UpdateTransaction(txId string, ostiaHost string, tar *bread.TransactionActionRequest) (*bread.TransactionResponse, error) {
	ret := _m.Called(txId, ostiaHost, tar)

	var r0 *bread.TransactionResponse
	if rf, ok := ret.Get(0).(func(string, string, *bread.TransactionActionRequest) *bread.TransactionResponse); ok {
		r0 = rf(txId, ostiaHost, tar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bread.TransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *bread.TransactionActionRequest) error); ok {
		r1 = rf(txId, ostiaHost, tar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
