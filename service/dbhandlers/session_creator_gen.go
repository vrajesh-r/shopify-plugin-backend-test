// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/creator. DO NOT EDIT.

package dbhandlers

import (
	"github.com/getbread/breadkit/zeus/creator"
	zeus "github.com/getbread/breadkit/zeus/types"
	"github.com/jmoiron/sqlx"
	"github.com/sirupsen/logrus"

	types "github.com/getbread/shopify_plugin_backend/service/types"
)

// interface for this creator
type SessionCreator interface {
	Create(c types.Session) (zeus.Uuid, error)
	TxCreate(tx *sqlx.Tx, c types.Session) (zeus.Uuid, error)
}

// implement SQL based creator
type sqlSessionCreator struct {
	db *sqlx.DB
}

func newSqlSessionCreator(db *sqlx.DB) SessionCreator {
	return &sqlSessionCreator{db: db}
}

func NewSqlSessionCreator(db *sqlx.DB) SessionCreator {
	return &sqlSessionCreator{db: db}
}

func (r *sqlSessionCreator) Create(c types.Session) (zeus.Uuid, error) {
	columns := []string{
		"shop_id",
		"expiration",
	}

	return creator.Insert(r.db.DB, "shopify_shops_sessions", columns, c.ShopId, c.Expiration)
}

func (r *sqlSessionCreator) TxCreate(tx *sqlx.Tx, c types.Session) (zeus.Uuid, error) {
	columns := []string{
		"shop_id",
		"expiration",
	}

	return creator.TxInsert(tx.Tx, "shopify_shops_sessions", columns, c.ShopId, c.Expiration)
}

// implement Fake creator for testing
type FakeSessionCreator struct {
	fakeResponse zeus.Uuid
	fakeErr      error
	lastSession  types.Session
	allSession   []types.Session
}

func NewFakeSessionCreatorWithError(fakeErr error) *FakeSessionCreator {
	return &FakeSessionCreator{fakeErr: fakeErr}
}

func NewFakeSessionCreator(fakeResponse zeus.Uuid) *FakeSessionCreator {
	return &FakeSessionCreator{fakeResponse: fakeResponse}
}

func (r *FakeSessionCreator) Create(c types.Session) (zeus.Uuid, error) {
	logrus.WithField("createRequest", c).Info("returning Session fake")

	if r.fakeErr != nil {
		return zeus.Uuid(""), r.fakeErr
	}
	r.lastSession = c
	r.allSession = append(r.allSession, c)
	return r.fakeResponse, nil
}

func (r *FakeSessionCreator) TxCreate(tx *sqlx.Tx, c types.Session) (zeus.Uuid, error) {
	return r.Create(c)
}

func (r *FakeSessionCreator) GetLastCreate() types.Session {
	return r.lastSession
}
func (r *FakeSessionCreator) GetAllCreated() []types.Session {
	return r.allSession
}

func (r *FakeSessionCreator) GetFakeResponse() zeus.Uuid {
	return r.fakeResponse
}
