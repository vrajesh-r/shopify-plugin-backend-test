// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/searcher. DO NOT EDIT.

package dbhandlers

import (
	"errors"
	"fmt"
	"strings"

	"github.com/getbread/breadkit/zeus/searcher"
	zeus "github.com/getbread/breadkit/zeus/types"
	"github.com/jmoiron/sqlx"

	search "github.com/getbread/shopify_plugin_backend/service/search"
	types "github.com/getbread/shopify_plugin_backend/service/types"
)

// interface for this searcher
type NonceSearcher interface {
	Search(searchRequest search.NonceSearchRequest) ([]types.Nonce, error)
	Count(searchRequest search.NonceSearchRequest) (searcher.CountResult, error)
	ById(id zeus.Uuid) (types.Nonce, error)

	TxSearch(tx *sqlx.Tx, searchRequest search.NonceSearchRequest) ([]types.Nonce, error)
	TxCount(tx *sqlx.Tx, searchRequest search.NonceSearchRequest) (searcher.CountResult, error)
	TxById(tx *sqlx.Tx, id zeus.Uuid) (types.Nonce, error)
}

// implement SQL based searcher
type sqlNonceSearcher struct {
	db *sqlx.DB
}

func newSqlNonceSearcher(db *sqlx.DB) NonceSearcher {
	return &sqlNonceSearcher{db}
}

func NewSqlNonceSearcher(db *sqlx.DB) NonceSearcher {
	return &sqlNonceSearcher{db}
}

func (r *sqlNonceSearcher) Search(searchRequest search.NonceSearchRequest) ([]types.Nonce, error) {
	results := []types.Nonce{}

	sqlStr, values, err := searcher.GetSelectSql(&searchRequest)

	if err != nil {
		return nil, fmt.Errorf("Error generating search SQL for NonceSearcher : %s", err.Error())
	}

	err = r.db.Select(&results, sqlStr, values.([]interface{})...)

	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return results, nil
		}
	}

	return results, err
}

func (r *sqlNonceSearcher) TxSearch(tx *sqlx.Tx, searchRequest search.NonceSearchRequest) ([]types.Nonce, error) {
	results := []types.Nonce{}

	sqlStr, values, err := searcher.GetSelectSql(&searchRequest)

	if err != nil {
		return nil, fmt.Errorf("Error generating search SQL for NonceSearcher : %s", err.Error())
	}

	err = tx.Select(&results, sqlStr, values.([]interface{})...)

	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return results, nil
		}
	}

	return results, err
}

func (r *sqlNonceSearcher) Count(searchRequest search.NonceSearchRequest) (searcher.CountResult, error) {
	result := searcher.CountResult{}

	sqlStr, values, err := searcher.GetCountSql(&searchRequest)

	if err != nil {
		return result, fmt.Errorf("Error generating count SQL for NonceSearcher : %s", err.Error())
	}

	err = r.db.Get(&result, sqlStr, values.([]interface{})...)

	return result, err
}

func (r *sqlNonceSearcher) TxCount(tx *sqlx.Tx, searchRequest search.NonceSearchRequest) (searcher.CountResult, error) {
	result := searcher.CountResult{}

	sqlStr, values, err := searcher.GetCountSql(&searchRequest)

	if err != nil {
		return result, fmt.Errorf("Error generating count SQL for NonceSearcher : %s", err.Error())
	}

	err = tx.Get(&result, sqlStr, values.([]interface{})...)

	return result, err
}

func (r *sqlNonceSearcher) ById(id zeus.Uuid) (types.Nonce, error) {
	result := types.Nonce{}

	fieldsStr := searcher.GetSelectFieldsAvailable(&search.NonceSearchRequest{})

	err := r.db.Get(&result, fmt.Sprintf("SELECT %s FROM shopify_shops_nonces WHERE id=$1", fieldsStr), string(id))

	return result, err
}

func (r *sqlNonceSearcher) TxById(tx *sqlx.Tx, id zeus.Uuid) (types.Nonce, error) {
	result := types.Nonce{}

	fieldsStr := searcher.GetSelectFieldsAvailable(&search.NonceSearchRequest{})

	err := tx.Get(&result, fmt.Sprintf("SELECT %s FROM shopify_shops_nonces WHERE id=$1", fieldsStr), string(id))

	return result, err
}

// implement Fake searcher for testing
type FakeNonceSearcher struct {
	fakeResponse []types.Nonce
	requests     []search.NonceSearchRequest

	fakeIdMap map[zeus.Uuid]types.Nonce
	fakeError error

	// On the nth occurrence of a call to this searcher, return the slice, otherwise default to `fakeResponse`
	onOccurrenceReturns map[int][]types.Nonce

	onOccurrenceCountReturns map[int]int
}

func NewFakeNonceSearcher(fakeResponse []types.Nonce) NonceSearcher {
	return &FakeNonceSearcher{
		fakeResponse:             fakeResponse,
		requests:                 []search.NonceSearchRequest{},
		fakeIdMap:                map[zeus.Uuid]types.Nonce{},
		fakeError:                nil,
		onOccurrenceReturns:      map[int][]types.Nonce{},
		onOccurrenceCountReturns: map[int]int{},
	}
}

func (r *FakeNonceSearcher) Search(searchRequest search.NonceSearchRequest) ([]types.Nonce, error) {
	r.requests = append(r.requests, searchRequest)

	if len(r.onOccurrenceReturns) > 0 {
		if occ, ok := r.onOccurrenceReturns[len(r.requests)]; ok {
			return occ, nil
		}
	}

	return r.fakeResponse, r.fakeError
}

func (r *FakeNonceSearcher) GetRequests() []search.NonceSearchRequest {
	return r.requests
}

func (r *FakeNonceSearcher) TxSearch(tx *sqlx.Tx, searchRequest search.NonceSearchRequest) ([]types.Nonce, error) {
	return r.Search(searchRequest)
}

func (r *FakeNonceSearcher) Count(searchRequest search.NonceSearchRequest) (searcher.CountResult, error) {
	count := searcher.CountResult{
		Count: len(r.fakeResponse),
	}

	r.requests = append(r.requests, searchRequest)

	if len(r.onOccurrenceCountReturns) > 0 {
		if occ, ok := r.onOccurrenceCountReturns[len(r.requests)]; ok {
			count.Count = occ
			return count, nil
		}
	}

	return count, r.fakeError
}

func (r *FakeNonceSearcher) TxCount(tx *sqlx.Tx, searchRequest search.NonceSearchRequest) (searcher.CountResult, error) {
	return r.Count(searchRequest)
}

func (r *FakeNonceSearcher) ById(id zeus.Uuid) (types.Nonce, error) {
	if len(r.fakeIdMap) == 0 {
		return r.fakeResponse[0], nil
	}

	entity, ok := r.fakeIdMap[id]
	if !ok {
		return types.Nonce{}, errors.New("Not able to find Nonce by id: " + string(id))
	}

	return entity, r.fakeError
}

func (r *FakeNonceSearcher) TxById(tx *sqlx.Tx, id zeus.Uuid) (types.Nonce, error) {
	return r.ById(id)
}

func (r *FakeNonceSearcher) SetByIdResponses(resp map[zeus.Uuid]types.Nonce) {
	r.fakeIdMap = resp
}

func (r *FakeNonceSearcher) SetError(err error) {
	r.fakeError = err
}

func (r *FakeNonceSearcher) GetFakeError() error {
	return r.fakeError
}

func (r *FakeNonceSearcher) GetOnOccurrenceReturns() map[int][]types.Nonce {
	return r.onOccurrenceReturns
}

func (r *FakeNonceSearcher) SetOnOccurrenceReturns(val map[int][]types.Nonce) {
	r.onOccurrenceReturns = val
}

func (r *FakeNonceSearcher) GetOnOccurrenceCountReturns() map[int]int {
	return r.onOccurrenceCountReturns
}

func (r *FakeNonceSearcher) SetOnOccurrenceCountReturns(val map[int]int) {
	r.onOccurrenceCountReturns = val
}
