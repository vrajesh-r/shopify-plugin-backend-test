// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/creator. DO NOT EDIT.

package dbhandlers

import (
	"github.com/getbread/breadkit/zeus/creator"
	zeus "github.com/getbread/breadkit/zeus/types"
	"github.com/jmoiron/sqlx"
	"github.com/sirupsen/logrus"

	types "github.com/getbread/shopify_plugin_backend/service/types"
)

// interface for this creator
type ShopCreator interface {
	Create(c types.Shop) (zeus.Uuid, error)
	TxCreate(tx *sqlx.Tx, c types.Shop) (zeus.Uuid, error)
}

// implement SQL based creator
type sqlShopCreator struct {
	db *sqlx.DB
}

func newSqlShopCreator(db *sqlx.DB) ShopCreator {
	return &sqlShopCreator{db: db}
}

func NewSqlShopCreator(db *sqlx.DB) ShopCreator {
	return &sqlShopCreator{db: db}
}

func (r *sqlShopCreator) Create(c types.Shop) (zeus.Uuid, error) {
	columns := []string{
		"shop",
		"access_token",
		"bread_api_key",
		"bread_secret_key",
		"bread_sandbox_api_key",
		"bread_sandbox_secret_key",
		"css",
		"css_cart",
		"oauth_permissions_up_to_date",
		"integration_key",
		"sandbox_integration_key",
		"active_version",
	}

	return creator.Insert(r.db.DB, "shopify_shops", columns, c.Shop, c.AccessToken, c.BreadApiKey, c.BreadSecretKey, c.BreadSandboxApiKey, c.BreadSandboxSecretKey, c.CSS, c.CSSCart, c.OAuthPermissionsUpToDate, c.IntegrationKey, c.SandboxIntegrationKey, c.ActiveVersion)
}

func (r *sqlShopCreator) TxCreate(tx *sqlx.Tx, c types.Shop) (zeus.Uuid, error) {
	columns := []string{
		"shop",
		"access_token",
		"bread_api_key",
		"bread_secret_key",
		"bread_sandbox_api_key",
		"bread_sandbox_secret_key",
		"css",
		"css_cart",
		"oauth_permissions_up_to_date",
		"integration_key",
		"sandbox_integration_key",
		"active_version",
	}

	return creator.TxInsert(tx.Tx, "shopify_shops", columns, c.Shop, c.AccessToken, c.BreadApiKey, c.BreadSecretKey, c.BreadSandboxApiKey, c.BreadSandboxSecretKey, c.CSS, c.CSSCart, c.OAuthPermissionsUpToDate, c.IntegrationKey, c.SandboxIntegrationKey, c.ActiveVersion)
}

// implement Fake creator for testing
type FakeShopCreator struct {
	fakeResponse zeus.Uuid
	fakeErr      error
	lastShop     types.Shop
	allShop      []types.Shop
}

func NewFakeShopCreatorWithError(fakeErr error) *FakeShopCreator {
	return &FakeShopCreator{fakeErr: fakeErr}
}

func NewFakeShopCreator(fakeResponse zeus.Uuid) *FakeShopCreator {
	return &FakeShopCreator{fakeResponse: fakeResponse}
}

func (r *FakeShopCreator) Create(c types.Shop) (zeus.Uuid, error) {
	logrus.WithField("createRequest", c).Info("returning Shop fake")

	if r.fakeErr != nil {
		return zeus.Uuid(""), r.fakeErr
	}
	r.lastShop = c
	r.allShop = append(r.allShop, c)
	return r.fakeResponse, nil
}

func (r *FakeShopCreator) TxCreate(tx *sqlx.Tx, c types.Shop) (zeus.Uuid, error) {
	return r.Create(c)
}

func (r *FakeShopCreator) GetLastCreate() types.Shop {
	return r.lastShop
}
func (r *FakeShopCreator) GetAllCreated() []types.Shop {
	return r.allShop
}

func (r *FakeShopCreator) GetFakeResponse() zeus.Uuid {
	return r.fakeResponse
}
