// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/creator. DO NOT EDIT.

package dbhandlers

import (
	"github.com/getbread/breadkit/zeus/creator"
	zeus "github.com/getbread/breadkit/zeus/types"
	"github.com/jmoiron/sqlx"
	"github.com/sirupsen/logrus"

	types "github.com/getbread/shopify_plugin_backend/service/types"
)

// interface for this creator
type GatewayAccountCreator interface {
	Create(c types.GatewayAccount) (zeus.Uuid, error)
	TxCreate(tx *sqlx.Tx, c types.GatewayAccount) (zeus.Uuid, error)
}

// implement SQL based creator
type sqlGatewayAccountCreator struct {
	db *sqlx.DB
}

func newSqlGatewayAccountCreator(db *sqlx.DB) GatewayAccountCreator {
	return &sqlGatewayAccountCreator{db: db}
}

func NewSqlGatewayAccountCreator(db *sqlx.DB) GatewayAccountCreator {
	return &sqlGatewayAccountCreator{db: db}
}

func (r *sqlGatewayAccountCreator) Create(c types.GatewayAccount) (zeus.Uuid, error) {
	columns := []string{
		"email",
		"password_hash",
		"gateway_key",
		"gateway_secret",
		"api_key",
		"shared_secret",
		"sandbox_api_key",
		"sandbox_shared_secret",
		"auto_settle",
		"healthcare_mode",
		"api_key_v2",
		"shared_secret_v2",
		"sandbox_api_key_v2",
		"sandbox_shared_secret_v2",
		"integration_key",
		"sandbox_integration_key",
		"auto_settle_v2",
		"active_version",
	}

	return creator.Insert(r.db.DB, "shopify_gateway_accounts", columns, c.Email, c.PasswordHash, c.GatewayKey, c.GatewaySecret, c.ApiKey, c.SharedSecret, c.SandboxApiKey, c.SandboxSharedSecret, c.AutoSettle, c.HealthcareMode, c.PlatformApiKey, c.PlatformSharedSecret, c.PlatformSandboxApiKey, c.PlatformSandboxSharedSecret, c.IntegrationKey, c.SandboxIntegrationKey, c.PlatformAutoSettle, c.ActiveVersion)
}

func (r *sqlGatewayAccountCreator) TxCreate(tx *sqlx.Tx, c types.GatewayAccount) (zeus.Uuid, error) {
	columns := []string{
		"email",
		"password_hash",
		"gateway_key",
		"gateway_secret",
		"api_key",
		"shared_secret",
		"sandbox_api_key",
		"sandbox_shared_secret",
		"auto_settle",
		"healthcare_mode",
		"api_key_v2",
		"shared_secret_v2",
		"sandbox_api_key_v2",
		"sandbox_shared_secret_v2",
		"integration_key",
		"sandbox_integration_key",
		"auto_settle_v2",
		"active_version",
	}

	return creator.TxInsert(tx.Tx, "shopify_gateway_accounts", columns, c.Email, c.PasswordHash, c.GatewayKey, c.GatewaySecret, c.ApiKey, c.SharedSecret, c.SandboxApiKey, c.SandboxSharedSecret, c.AutoSettle, c.HealthcareMode, c.PlatformApiKey, c.PlatformSharedSecret, c.PlatformSandboxApiKey, c.PlatformSandboxSharedSecret, c.IntegrationKey, c.SandboxIntegrationKey, c.PlatformAutoSettle, c.ActiveVersion)
}

// implement Fake creator for testing
type FakeGatewayAccountCreator struct {
	fakeResponse       zeus.Uuid
	fakeErr            error
	lastGatewayAccount types.GatewayAccount
	allGatewayAccount  []types.GatewayAccount
}

func NewFakeGatewayAccountCreatorWithError(fakeErr error) *FakeGatewayAccountCreator {
	return &FakeGatewayAccountCreator{fakeErr: fakeErr}
}

func NewFakeGatewayAccountCreator(fakeResponse zeus.Uuid) *FakeGatewayAccountCreator {
	return &FakeGatewayAccountCreator{fakeResponse: fakeResponse}
}

func (r *FakeGatewayAccountCreator) Create(c types.GatewayAccount) (zeus.Uuid, error) {
	logrus.WithField("createRequest", c).Info("returning GatewayAccount fake")

	if r.fakeErr != nil {
		return zeus.Uuid(""), r.fakeErr
	}
	r.lastGatewayAccount = c
	r.allGatewayAccount = append(r.allGatewayAccount, c)
	return r.fakeResponse, nil
}

func (r *FakeGatewayAccountCreator) TxCreate(tx *sqlx.Tx, c types.GatewayAccount) (zeus.Uuid, error) {
	return r.Create(c)
}

func (r *FakeGatewayAccountCreator) GetLastCreate() types.GatewayAccount {
	return r.lastGatewayAccount
}
func (r *FakeGatewayAccountCreator) GetAllCreated() []types.GatewayAccount {
	return r.allGatewayAccount
}

func (r *FakeGatewayAccountCreator) GetFakeResponse() zeus.Uuid {
	return r.fakeResponse
}
