// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/creator. DO NOT EDIT.

package dbhandlers

import (
	"github.com/getbread/breadkit/zeus/creator"
	zeus "github.com/getbread/breadkit/zeus/types"
	"github.com/jmoiron/sqlx"
	"github.com/sirupsen/logrus"

	types "github.com/getbread/shopify_plugin_backend/service/types"
)

// interface for this creator
type DraftOrderCartCheckoutCreator interface {
	Create(c types.DraftOrderCartCheckout) (zeus.Uuid, error)
	TxCreate(tx *sqlx.Tx, c types.DraftOrderCartCheckout) (zeus.Uuid, error)
}

// implement SQL based creator
type sqlDraftOrderCartCheckoutCreator struct {
	db *sqlx.DB
}

func newSqlDraftOrderCartCheckoutCreator(db *sqlx.DB) DraftOrderCartCheckoutCreator {
	return &sqlDraftOrderCartCheckoutCreator{db: db}
}

func NewSqlDraftOrderCartCheckoutCreator(db *sqlx.DB) DraftOrderCartCheckoutCreator {
	return &sqlDraftOrderCartCheckoutCreator{db: db}
}

func (r *sqlDraftOrderCartCheckoutCreator) Create(c types.DraftOrderCartCheckout) (zeus.Uuid, error) {
	columns := []string{
		"shop_id",
		"tx_id",
		"draft_order_cart_id",
		"order_id",
		"is_production",
		"completed",
		"errored",
	}

	return creator.Insert(r.db.DB, "shopify_shops_draft_order_cart_checkouts", columns, c.ShopID, c.TxID, c.DraftOrderCartID, c.OrderID, c.IsProduction, c.Completed, c.Errored)
}

func (r *sqlDraftOrderCartCheckoutCreator) TxCreate(tx *sqlx.Tx, c types.DraftOrderCartCheckout) (zeus.Uuid, error) {
	columns := []string{
		"shop_id",
		"tx_id",
		"draft_order_cart_id",
		"order_id",
		"is_production",
		"completed",
		"errored",
	}

	return creator.TxInsert(tx.Tx, "shopify_shops_draft_order_cart_checkouts", columns, c.ShopID, c.TxID, c.DraftOrderCartID, c.OrderID, c.IsProduction, c.Completed, c.Errored)
}

// implement Fake creator for testing
type FakeDraftOrderCartCheckoutCreator struct {
	fakeResponse               zeus.Uuid
	fakeErr                    error
	lastDraftOrderCartCheckout types.DraftOrderCartCheckout
	allDraftOrderCartCheckout  []types.DraftOrderCartCheckout
}

func NewFakeDraftOrderCartCheckoutCreatorWithError(fakeErr error) *FakeDraftOrderCartCheckoutCreator {
	return &FakeDraftOrderCartCheckoutCreator{fakeErr: fakeErr}
}

func NewFakeDraftOrderCartCheckoutCreator(fakeResponse zeus.Uuid) *FakeDraftOrderCartCheckoutCreator {
	return &FakeDraftOrderCartCheckoutCreator{fakeResponse: fakeResponse}
}

func (r *FakeDraftOrderCartCheckoutCreator) Create(c types.DraftOrderCartCheckout) (zeus.Uuid, error) {
	logrus.WithField("createRequest", c).Info("returning DraftOrderCartCheckout fake")

	if r.fakeErr != nil {
		return zeus.Uuid(""), r.fakeErr
	}
	r.lastDraftOrderCartCheckout = c
	r.allDraftOrderCartCheckout = append(r.allDraftOrderCartCheckout, c)
	return r.fakeResponse, nil
}

func (r *FakeDraftOrderCartCheckoutCreator) TxCreate(tx *sqlx.Tx, c types.DraftOrderCartCheckout) (zeus.Uuid, error) {
	return r.Create(c)
}

func (r *FakeDraftOrderCartCheckoutCreator) GetLastCreate() types.DraftOrderCartCheckout {
	return r.lastDraftOrderCartCheckout
}
func (r *FakeDraftOrderCartCheckoutCreator) GetAllCreated() []types.DraftOrderCartCheckout {
	return r.allDraftOrderCartCheckout
}

func (r *FakeDraftOrderCartCheckoutCreator) GetFakeResponse() zeus.Uuid {
	return r.fakeResponse
}
