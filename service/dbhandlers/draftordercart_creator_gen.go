// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/creator. DO NOT EDIT.

package dbhandlers

import (
	"github.com/getbread/breadkit/zeus/creator"
	zeus "github.com/getbread/breadkit/zeus/types"
	"github.com/jmoiron/sqlx"
	"github.com/sirupsen/logrus"

	types "github.com/getbread/shopify_plugin_backend/service/types"
)

// interface for this creator
type DraftOrderCartCreator interface {
	Create(c types.DraftOrderCart) (zeus.Uuid, error)
	TxCreate(tx *sqlx.Tx, c types.DraftOrderCart) (zeus.Uuid, error)
}

// implement SQL based creator
type sqlDraftOrderCartCreator struct {
	db *sqlx.DB
}

func newSqlDraftOrderCartCreator(db *sqlx.DB) DraftOrderCartCreator {
	return &sqlDraftOrderCartCreator{db: db}
}

func NewSqlDraftOrderCartCreator(db *sqlx.DB) DraftOrderCartCreator {
	return &sqlDraftOrderCartCreator{db: db}
}

func (r *sqlDraftOrderCartCreator) Create(c types.DraftOrderCart) (zeus.Uuid, error) {
	columns := []string{
		"id",
		"shop_id",
		"draft_order_id",
		"cart_id",
		"cart_url",
		"is_production",
		"is_deleted",
	}

	return creator.Insert(r.db.DB, "shopify_shops_draft_order_carts", columns, c.ID, c.ShopID, c.DraftOrderID, c.CartID, c.CartURL, c.IsProduction, c.IsDeleted)
}

func (r *sqlDraftOrderCartCreator) TxCreate(tx *sqlx.Tx, c types.DraftOrderCart) (zeus.Uuid, error) {
	columns := []string{
		"id",
		"shop_id",
		"draft_order_id",
		"cart_id",
		"cart_url",
		"is_production",
		"is_deleted",
	}

	return creator.TxInsert(tx.Tx, "shopify_shops_draft_order_carts", columns, c.ID, c.ShopID, c.DraftOrderID, c.CartID, c.CartURL, c.IsProduction, c.IsDeleted)
}

// implement Fake creator for testing
type FakeDraftOrderCartCreator struct {
	fakeResponse       zeus.Uuid
	fakeErr            error
	lastDraftOrderCart types.DraftOrderCart
	allDraftOrderCart  []types.DraftOrderCart
}

func NewFakeDraftOrderCartCreatorWithError(fakeErr error) *FakeDraftOrderCartCreator {
	return &FakeDraftOrderCartCreator{fakeErr: fakeErr}
}

func NewFakeDraftOrderCartCreator(fakeResponse zeus.Uuid) *FakeDraftOrderCartCreator {
	return &FakeDraftOrderCartCreator{fakeResponse: fakeResponse}
}

func (r *FakeDraftOrderCartCreator) Create(c types.DraftOrderCart) (zeus.Uuid, error) {
	logrus.WithField("createRequest", c).Info("returning DraftOrderCart fake")

	if r.fakeErr != nil {
		return zeus.Uuid(""), r.fakeErr
	}
	r.lastDraftOrderCart = c
	r.allDraftOrderCart = append(r.allDraftOrderCart, c)
	return r.fakeResponse, nil
}

func (r *FakeDraftOrderCartCreator) TxCreate(tx *sqlx.Tx, c types.DraftOrderCart) (zeus.Uuid, error) {
	return r.Create(c)
}

func (r *FakeDraftOrderCartCreator) GetLastCreate() types.DraftOrderCart {
	return r.lastDraftOrderCart
}
func (r *FakeDraftOrderCartCreator) GetAllCreated() []types.DraftOrderCart {
	return r.allDraftOrderCart
}

func (r *FakeDraftOrderCartCreator) GetFakeResponse() zeus.Uuid {
	return r.fakeResponse
}
