// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/creator. DO NOT EDIT.

package dbhandlers

import (
	"github.com/getbread/breadkit/zeus/creator"
	zeus "github.com/getbread/breadkit/zeus/types"
	"github.com/jmoiron/sqlx"
	"github.com/sirupsen/logrus"

	types "github.com/getbread/shopify_plugin_backend/service/types"
)

// interface for this creator
type OrderCreator interface {
	Create(c types.Order) (zeus.Uuid, error)
	TxCreate(tx *sqlx.Tx, c types.Order) (zeus.Uuid, error)
}

// implement SQL based creator
type sqlOrderCreator struct {
	db *sqlx.DB
}

func newSqlOrderCreator(db *sqlx.DB) OrderCreator {
	return &sqlOrderCreator{db: db}
}

func NewSqlOrderCreator(db *sqlx.DB) OrderCreator {
	return &sqlOrderCreator{db: db}
}

func (r *sqlOrderCreator) Create(c types.Order) (zeus.Uuid, error) {
	columns := []string{
		"shop_id",
		"order_id",
		"tx_id",
		"production",
	}

	return creator.Insert(r.db.DB, "shopify_shops_orders", columns, c.ShopId, c.OrderId, c.TxId, c.Production)
}

func (r *sqlOrderCreator) TxCreate(tx *sqlx.Tx, c types.Order) (zeus.Uuid, error) {
	columns := []string{
		"shop_id",
		"order_id",
		"tx_id",
		"production",
	}

	return creator.TxInsert(tx.Tx, "shopify_shops_orders", columns, c.ShopId, c.OrderId, c.TxId, c.Production)
}

// implement Fake creator for testing
type FakeOrderCreator struct {
	fakeResponse zeus.Uuid
	fakeErr      error
	lastOrder    types.Order
	allOrder     []types.Order
}

func NewFakeOrderCreatorWithError(fakeErr error) *FakeOrderCreator {
	return &FakeOrderCreator{fakeErr: fakeErr}
}

func NewFakeOrderCreator(fakeResponse zeus.Uuid) *FakeOrderCreator {
	return &FakeOrderCreator{fakeResponse: fakeResponse}
}

func (r *FakeOrderCreator) Create(c types.Order) (zeus.Uuid, error) {
	logrus.WithField("createRequest", c).Info("returning Order fake")

	if r.fakeErr != nil {
		return zeus.Uuid(""), r.fakeErr
	}
	r.lastOrder = c
	r.allOrder = append(r.allOrder, c)
	return r.fakeResponse, nil
}

func (r *FakeOrderCreator) TxCreate(tx *sqlx.Tx, c types.Order) (zeus.Uuid, error) {
	return r.Create(c)
}

func (r *FakeOrderCreator) GetLastCreate() types.Order {
	return r.lastOrder
}
func (r *FakeOrderCreator) GetAllCreated() []types.Order {
	return r.allOrder
}

func (r *FakeOrderCreator) GetFakeResponse() zeus.Uuid {
	return r.fakeResponse
}
