// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/updater. DO NOT EDIT.

package dbhandlers

import (
	"fmt"

	zeus "github.com/getbread/breadkit/zeus/types"
	"github.com/getbread/breadkit/zeus/updater"
	update "github.com/getbread/shopify_plugin_backend/service/update"
	"github.com/jmoiron/sqlx"
)

// interface for this updater
type GiftCardOrderUpdater interface {
	Update(updateRequest update.GiftCardOrderUpdateRequest) error
	TxUpdate(tx *sqlx.Tx, updateRequest update.GiftCardOrderUpdateRequest) error
	DeleteById(id zeus.Uuid) error
	TxDeleteById(tx *sqlx.Tx, id zeus.Uuid) error
}

// implement SQL based updater
type sqlGiftCardOrderUpdater struct {
	db *sqlx.DB
}

func newSqlGiftCardOrderUpdater(db *sqlx.DB) GiftCardOrderUpdater {
	return &sqlGiftCardOrderUpdater{db: db}
}

func NewSqlGiftCardOrderUpdater(db *sqlx.DB) GiftCardOrderUpdater {
	return &sqlGiftCardOrderUpdater{db: db}
}

func (r *sqlGiftCardOrderUpdater) Update(updateRequest update.GiftCardOrderUpdateRequest) error {

	sqlStr, values, err := updater.GetUpdateSql(&updateRequest)

	if err != nil {
		return fmt.Errorf("Error generating update SQL for GiftCardOrderUpdater : %s", err.Error())
	}

	_, err = r.db.Exec(sqlStr, values.([]interface{})...)

	return err
}

func (r *sqlGiftCardOrderUpdater) TxUpdate(tx *sqlx.Tx, updateRequest update.GiftCardOrderUpdateRequest) error {

	sqlStr, values, err := updater.GetUpdateSql(&updateRequest)

	if err != nil {
		return fmt.Errorf("Error generating update SQL for GiftCardOrderUpdater : %s", err.Error())
	}

	_, err = tx.Exec(sqlStr, values.([]interface{})...)

	return err
}

func (r *sqlGiftCardOrderUpdater) DeleteById(id zeus.Uuid) error {
	ur := update.GiftCardOrderUpdateRequest{
		Id: id,
	}

	sqlStr, values, err := updater.GetDeleteSql(&ur)

	if err != nil {
		return fmt.Errorf("Error generating delete SQL for GiftCardOrderUpdater : %s", err.Error())
	}

	_, err = r.db.Exec(sqlStr, values.([]interface{})...)

	return err
}

func (r *sqlGiftCardOrderUpdater) TxDeleteById(tx *sqlx.Tx, id zeus.Uuid) error {
	ur := update.GiftCardOrderUpdateRequest{
		Id: id,
	}

	sqlStr, values, err := updater.GetDeleteSql(&ur)

	if err != nil {
		return fmt.Errorf("Error generating delete SQL for GiftCardOrderUpdater : %s", err.Error())
	}

	_, err = tx.Exec(sqlStr, values.([]interface{})...)

	return err
}

// implement Fake updater for testing
type FakeGiftCardOrderUpdater struct {
	fakeResponse     error
	collectedUpdates []update.GiftCardOrderUpdateRequest
	collectedDeletes []zeus.Uuid
}

func NewFakeGiftCardOrderUpdater(fakeResponse error) GiftCardOrderUpdater {
	return &FakeGiftCardOrderUpdater{fakeResponse: fakeResponse}
}

func (r *FakeGiftCardOrderUpdater) Update(updateRequest update.GiftCardOrderUpdateRequest) error {
	r.collectedUpdates = append(r.collectedUpdates, updateRequest)
	return r.fakeResponse
}

func (r *FakeGiftCardOrderUpdater) TxUpdate(tx *sqlx.Tx, updateRequest update.GiftCardOrderUpdateRequest) error {
	return r.Update(updateRequest)
}

func (r *FakeGiftCardOrderUpdater) DeleteById(id zeus.Uuid) error {
	r.collectedDeletes = append(r.collectedDeletes, id)
	return nil
}

func (r *FakeGiftCardOrderUpdater) TxDeleteById(tx *sqlx.Tx, id zeus.Uuid) error {
	return r.DeleteById(id)
}

func (r *FakeGiftCardOrderUpdater) GetCollectedUpdates() []update.GiftCardOrderUpdateRequest {
	return r.collectedUpdates
}

func (r *FakeGiftCardOrderUpdater) GetCollectedDeletes() []zeus.Uuid {
	return r.collectedDeletes
}
