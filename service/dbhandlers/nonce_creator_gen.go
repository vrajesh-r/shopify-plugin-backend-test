// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/creator. DO NOT EDIT.

package dbhandlers

import (
	"github.com/getbread/breadkit/zeus/creator"
	zeus "github.com/getbread/breadkit/zeus/types"
	"github.com/jmoiron/sqlx"
	"github.com/sirupsen/logrus"

	types "github.com/getbread/shopify_plugin_backend/service/types"
)

// interface for this creator
type NonceCreator interface {
	Create(c types.Nonce) (zeus.Uuid, error)
	TxCreate(tx *sqlx.Tx, c types.Nonce) (zeus.Uuid, error)
}

// implement SQL based creator
type sqlNonceCreator struct {
	db *sqlx.DB
}

func newSqlNonceCreator(db *sqlx.DB) NonceCreator {
	return &sqlNonceCreator{db: db}
}

func NewSqlNonceCreator(db *sqlx.DB) NonceCreator {
	return &sqlNonceCreator{db: db}
}

func (r *sqlNonceCreator) Create(c types.Nonce) (zeus.Uuid, error) {
	columns := []string{
		"shop_id",
		"nonce",
	}

	return creator.Insert(r.db.DB, "shopify_shops_nonces", columns, c.ShopId, c.Nonce)
}

func (r *sqlNonceCreator) TxCreate(tx *sqlx.Tx, c types.Nonce) (zeus.Uuid, error) {
	columns := []string{
		"shop_id",
		"nonce",
	}

	return creator.TxInsert(tx.Tx, "shopify_shops_nonces", columns, c.ShopId, c.Nonce)
}

// implement Fake creator for testing
type FakeNonceCreator struct {
	fakeResponse zeus.Uuid
	fakeErr      error
	lastNonce    types.Nonce
	allNonce     []types.Nonce
}

func NewFakeNonceCreatorWithError(fakeErr error) *FakeNonceCreator {
	return &FakeNonceCreator{fakeErr: fakeErr}
}

func NewFakeNonceCreator(fakeResponse zeus.Uuid) *FakeNonceCreator {
	return &FakeNonceCreator{fakeResponse: fakeResponse}
}

func (r *FakeNonceCreator) Create(c types.Nonce) (zeus.Uuid, error) {
	logrus.WithField("createRequest", c).Info("returning Nonce fake")

	if r.fakeErr != nil {
		return zeus.Uuid(""), r.fakeErr
	}
	r.lastNonce = c
	r.allNonce = append(r.allNonce, c)
	return r.fakeResponse, nil
}

func (r *FakeNonceCreator) TxCreate(tx *sqlx.Tx, c types.Nonce) (zeus.Uuid, error) {
	return r.Create(c)
}

func (r *FakeNonceCreator) GetLastCreate() types.Nonce {
	return r.lastNonce
}
func (r *FakeNonceCreator) GetAllCreated() []types.Nonce {
	return r.allNonce
}

func (r *FakeNonceCreator) GetFakeResponse() zeus.Uuid {
	return r.fakeResponse
}
