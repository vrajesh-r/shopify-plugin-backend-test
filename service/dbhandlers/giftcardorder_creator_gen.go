// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/creator. DO NOT EDIT.

package dbhandlers

import (
	"github.com/getbread/breadkit/zeus/creator"
	zeus "github.com/getbread/breadkit/zeus/types"
	"github.com/jmoiron/sqlx"
	"github.com/sirupsen/logrus"

	types "github.com/getbread/shopify_plugin_backend/service/types"
)

// interface for this creator
type GiftCardOrderCreator interface {
	Create(c types.GiftCardOrder) (zeus.Uuid, error)
	TxCreate(tx *sqlx.Tx, c types.GiftCardOrder) (zeus.Uuid, error)
}

// implement SQL based creator
type sqlGiftCardOrderCreator struct {
	db *sqlx.DB
}

func newSqlGiftCardOrderCreator(db *sqlx.DB) GiftCardOrderCreator {
	return &sqlGiftCardOrderCreator{db: db}
}

func NewSqlGiftCardOrderCreator(db *sqlx.DB) GiftCardOrderCreator {
	return &sqlGiftCardOrderCreator{db: db}
}

func (r *sqlGiftCardOrderCreator) Create(c types.GiftCardOrder) (zeus.Uuid, error) {
	columns := []string{
		"order_id",
		"shop_name",
		"gateway",
		"test",
		"item_name",
		"item_price",
		"quantity",
		"requires_shipping",
		"is_shopify_gift_card",
		"name_contains_gift_only",
		"name_contains_gift_card",
	}

	return creator.Insert(r.db.DB, "shopify_gift_card_orders", columns, c.OrderID, c.ShopName, c.Gateway, c.Test, c.ItemName, c.ItemPrice, c.Quantity, c.RequiresShipping, c.IsShopifyGiftCard, c.NameContainsGiftOnly, c.NameContainsGiftCard)
}

func (r *sqlGiftCardOrderCreator) TxCreate(tx *sqlx.Tx, c types.GiftCardOrder) (zeus.Uuid, error) {
	columns := []string{
		"order_id",
		"shop_name",
		"gateway",
		"test",
		"item_name",
		"item_price",
		"quantity",
		"requires_shipping",
		"is_shopify_gift_card",
		"name_contains_gift_only",
		"name_contains_gift_card",
	}

	return creator.TxInsert(tx.Tx, "shopify_gift_card_orders", columns, c.OrderID, c.ShopName, c.Gateway, c.Test, c.ItemName, c.ItemPrice, c.Quantity, c.RequiresShipping, c.IsShopifyGiftCard, c.NameContainsGiftOnly, c.NameContainsGiftCard)
}

// implement Fake creator for testing
type FakeGiftCardOrderCreator struct {
	fakeResponse      zeus.Uuid
	fakeErr           error
	lastGiftCardOrder types.GiftCardOrder
	allGiftCardOrder  []types.GiftCardOrder
}

func NewFakeGiftCardOrderCreatorWithError(fakeErr error) *FakeGiftCardOrderCreator {
	return &FakeGiftCardOrderCreator{fakeErr: fakeErr}
}

func NewFakeGiftCardOrderCreator(fakeResponse zeus.Uuid) *FakeGiftCardOrderCreator {
	return &FakeGiftCardOrderCreator{fakeResponse: fakeResponse}
}

func (r *FakeGiftCardOrderCreator) Create(c types.GiftCardOrder) (zeus.Uuid, error) {
	logrus.WithField("createRequest", c).Info("returning GiftCardOrder fake")

	if r.fakeErr != nil {
		return zeus.Uuid(""), r.fakeErr
	}
	r.lastGiftCardOrder = c
	r.allGiftCardOrder = append(r.allGiftCardOrder, c)
	return r.fakeResponse, nil
}

func (r *FakeGiftCardOrderCreator) TxCreate(tx *sqlx.Tx, c types.GiftCardOrder) (zeus.Uuid, error) {
	return r.Create(c)
}

func (r *FakeGiftCardOrderCreator) GetLastCreate() types.GiftCardOrder {
	return r.lastGiftCardOrder
}
func (r *FakeGiftCardOrderCreator) GetAllCreated() []types.GiftCardOrder {
	return r.allGiftCardOrder
}

func (r *FakeGiftCardOrderCreator) GetFakeResponse() zeus.Uuid {
	return r.fakeResponse
}
