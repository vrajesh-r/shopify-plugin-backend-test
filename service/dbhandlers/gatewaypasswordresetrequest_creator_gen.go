// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/creator. DO NOT EDIT.

package dbhandlers

import (
	"github.com/getbread/breadkit/zeus/creator"
	zeus "github.com/getbread/breadkit/zeus/types"
	"github.com/jmoiron/sqlx"
	"github.com/sirupsen/logrus"

	types "github.com/getbread/shopify_plugin_backend/service/types"
)

// interface for this creator
type GatewayPasswordResetRequestCreator interface {
	Create(c types.GatewayPasswordResetRequest) (zeus.Uuid, error)
	TxCreate(tx *sqlx.Tx, c types.GatewayPasswordResetRequest) (zeus.Uuid, error)
}

// implement SQL based creator
type sqlGatewayPasswordResetRequestCreator struct {
	db *sqlx.DB
}

func newSqlGatewayPasswordResetRequestCreator(db *sqlx.DB) GatewayPasswordResetRequestCreator {
	return &sqlGatewayPasswordResetRequestCreator{db: db}
}

func NewSqlGatewayPasswordResetRequestCreator(db *sqlx.DB) GatewayPasswordResetRequestCreator {
	return &sqlGatewayPasswordResetRequestCreator{db: db}
}

func (r *sqlGatewayPasswordResetRequestCreator) Create(c types.GatewayPasswordResetRequest) (zeus.Uuid, error) {
	columns := []string{
		"account_id",
		"token_hash",
		"expiration",
	}

	return creator.Insert(r.db.DB, "shopify_gateway_password_reset_requests", columns, c.AccountID, c.TokenHash, c.Expiration)
}

func (r *sqlGatewayPasswordResetRequestCreator) TxCreate(tx *sqlx.Tx, c types.GatewayPasswordResetRequest) (zeus.Uuid, error) {
	columns := []string{
		"account_id",
		"token_hash",
		"expiration",
	}

	return creator.TxInsert(tx.Tx, "shopify_gateway_password_reset_requests", columns, c.AccountID, c.TokenHash, c.Expiration)
}

// implement Fake creator for testing
type FakeGatewayPasswordResetRequestCreator struct {
	fakeResponse                    zeus.Uuid
	fakeErr                         error
	lastGatewayPasswordResetRequest types.GatewayPasswordResetRequest
	allGatewayPasswordResetRequest  []types.GatewayPasswordResetRequest
}

func NewFakeGatewayPasswordResetRequestCreatorWithError(fakeErr error) *FakeGatewayPasswordResetRequestCreator {
	return &FakeGatewayPasswordResetRequestCreator{fakeErr: fakeErr}
}

func NewFakeGatewayPasswordResetRequestCreator(fakeResponse zeus.Uuid) *FakeGatewayPasswordResetRequestCreator {
	return &FakeGatewayPasswordResetRequestCreator{fakeResponse: fakeResponse}
}

func (r *FakeGatewayPasswordResetRequestCreator) Create(c types.GatewayPasswordResetRequest) (zeus.Uuid, error) {
	logrus.WithField("createRequest", c).Info("returning GatewayPasswordResetRequest fake")

	if r.fakeErr != nil {
		return zeus.Uuid(""), r.fakeErr
	}
	r.lastGatewayPasswordResetRequest = c
	r.allGatewayPasswordResetRequest = append(r.allGatewayPasswordResetRequest, c)
	return r.fakeResponse, nil
}

func (r *FakeGatewayPasswordResetRequestCreator) TxCreate(tx *sqlx.Tx, c types.GatewayPasswordResetRequest) (zeus.Uuid, error) {
	return r.Create(c)
}

func (r *FakeGatewayPasswordResetRequestCreator) GetLastCreate() types.GatewayPasswordResetRequest {
	return r.lastGatewayPasswordResetRequest
}
func (r *FakeGatewayPasswordResetRequestCreator) GetAllCreated() []types.GatewayPasswordResetRequest {
	return r.allGatewayPasswordResetRequest
}

func (r *FakeGatewayPasswordResetRequestCreator) GetFakeResponse() zeus.Uuid {
	return r.fakeResponse
}
