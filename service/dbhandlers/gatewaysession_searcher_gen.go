// Code generated by https://github.com/getbread/breadkit/zeus/tree/master/generators/searcher. DO NOT EDIT.

package dbhandlers

import (
	"errors"
	"fmt"
	"strings"

	"github.com/getbread/breadkit/zeus/searcher"
	zeus "github.com/getbread/breadkit/zeus/types"
	"github.com/jmoiron/sqlx"

	search "github.com/getbread/shopify_plugin_backend/service/search"
	types "github.com/getbread/shopify_plugin_backend/service/types"
)

// interface for this searcher
type GatewaySessionSearcher interface {
	Search(searchRequest search.GatewaySessionSearchRequest) ([]types.GatewaySession, error)
	Count(searchRequest search.GatewaySessionSearchRequest) (searcher.CountResult, error)
	ById(id zeus.Uuid) (types.GatewaySession, error)

	TxSearch(tx *sqlx.Tx, searchRequest search.GatewaySessionSearchRequest) ([]types.GatewaySession, error)
	TxCount(tx *sqlx.Tx, searchRequest search.GatewaySessionSearchRequest) (searcher.CountResult, error)
	TxById(tx *sqlx.Tx, id zeus.Uuid) (types.GatewaySession, error)
}

// implement SQL based searcher
type sqlGatewaySessionSearcher struct {
	db *sqlx.DB
}

func newSqlGatewaySessionSearcher(db *sqlx.DB) GatewaySessionSearcher {
	return &sqlGatewaySessionSearcher{db}
}

func NewSqlGatewaySessionSearcher(db *sqlx.DB) GatewaySessionSearcher {
	return &sqlGatewaySessionSearcher{db}
}

func (r *sqlGatewaySessionSearcher) Search(searchRequest search.GatewaySessionSearchRequest) ([]types.GatewaySession, error) {
	results := []types.GatewaySession{}

	sqlStr, values, err := searcher.GetSelectSql(&searchRequest)

	if err != nil {
		return nil, fmt.Errorf("Error generating search SQL for GatewaySessionSearcher : %s", err.Error())
	}

	err = r.db.Select(&results, sqlStr, values.([]interface{})...)

	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return results, nil
		}
	}

	return results, err
}

func (r *sqlGatewaySessionSearcher) TxSearch(tx *sqlx.Tx, searchRequest search.GatewaySessionSearchRequest) ([]types.GatewaySession, error) {
	results := []types.GatewaySession{}

	sqlStr, values, err := searcher.GetSelectSql(&searchRequest)

	if err != nil {
		return nil, fmt.Errorf("Error generating search SQL for GatewaySessionSearcher : %s", err.Error())
	}

	err = tx.Select(&results, sqlStr, values.([]interface{})...)

	if err != nil {
		if strings.Contains(err.Error(), "no rows in result set") {
			return results, nil
		}
	}

	return results, err
}

func (r *sqlGatewaySessionSearcher) Count(searchRequest search.GatewaySessionSearchRequest) (searcher.CountResult, error) {
	result := searcher.CountResult{}

	sqlStr, values, err := searcher.GetCountSql(&searchRequest)

	if err != nil {
		return result, fmt.Errorf("Error generating count SQL for GatewaySessionSearcher : %s", err.Error())
	}

	err = r.db.Get(&result, sqlStr, values.([]interface{})...)

	return result, err
}

func (r *sqlGatewaySessionSearcher) TxCount(tx *sqlx.Tx, searchRequest search.GatewaySessionSearchRequest) (searcher.CountResult, error) {
	result := searcher.CountResult{}

	sqlStr, values, err := searcher.GetCountSql(&searchRequest)

	if err != nil {
		return result, fmt.Errorf("Error generating count SQL for GatewaySessionSearcher : %s", err.Error())
	}

	err = tx.Get(&result, sqlStr, values.([]interface{})...)

	return result, err
}

func (r *sqlGatewaySessionSearcher) ById(id zeus.Uuid) (types.GatewaySession, error) {
	result := types.GatewaySession{}

	fieldsStr := searcher.GetSelectFieldsAvailable(&search.GatewaySessionSearchRequest{})

	err := r.db.Get(&result, fmt.Sprintf("SELECT %s FROM shopify_gateway_sessions WHERE id=$1", fieldsStr), string(id))

	return result, err
}

func (r *sqlGatewaySessionSearcher) TxById(tx *sqlx.Tx, id zeus.Uuid) (types.GatewaySession, error) {
	result := types.GatewaySession{}

	fieldsStr := searcher.GetSelectFieldsAvailable(&search.GatewaySessionSearchRequest{})

	err := tx.Get(&result, fmt.Sprintf("SELECT %s FROM shopify_gateway_sessions WHERE id=$1", fieldsStr), string(id))

	return result, err
}

// implement Fake searcher for testing
type FakeGatewaySessionSearcher struct {
	fakeResponse []types.GatewaySession
	requests     []search.GatewaySessionSearchRequest

	fakeIdMap map[zeus.Uuid]types.GatewaySession
	fakeError error

	// On the nth occurrence of a call to this searcher, return the slice, otherwise default to `fakeResponse`
	onOccurrenceReturns map[int][]types.GatewaySession

	onOccurrenceCountReturns map[int]int
}

func NewFakeGatewaySessionSearcher(fakeResponse []types.GatewaySession) GatewaySessionSearcher {
	return &FakeGatewaySessionSearcher{
		fakeResponse:             fakeResponse,
		requests:                 []search.GatewaySessionSearchRequest{},
		fakeIdMap:                map[zeus.Uuid]types.GatewaySession{},
		fakeError:                nil,
		onOccurrenceReturns:      map[int][]types.GatewaySession{},
		onOccurrenceCountReturns: map[int]int{},
	}
}

func (r *FakeGatewaySessionSearcher) Search(searchRequest search.GatewaySessionSearchRequest) ([]types.GatewaySession, error) {
	r.requests = append(r.requests, searchRequest)

	if len(r.onOccurrenceReturns) > 0 {
		if occ, ok := r.onOccurrenceReturns[len(r.requests)]; ok {
			return occ, nil
		}
	}

	return r.fakeResponse, r.fakeError
}

func (r *FakeGatewaySessionSearcher) GetRequests() []search.GatewaySessionSearchRequest {
	return r.requests
}

func (r *FakeGatewaySessionSearcher) TxSearch(tx *sqlx.Tx, searchRequest search.GatewaySessionSearchRequest) ([]types.GatewaySession, error) {
	return r.Search(searchRequest)
}

func (r *FakeGatewaySessionSearcher) Count(searchRequest search.GatewaySessionSearchRequest) (searcher.CountResult, error) {
	count := searcher.CountResult{
		Count: len(r.fakeResponse),
	}

	r.requests = append(r.requests, searchRequest)

	if len(r.onOccurrenceCountReturns) > 0 {
		if occ, ok := r.onOccurrenceCountReturns[len(r.requests)]; ok {
			count.Count = occ
			return count, nil
		}
	}

	return count, r.fakeError
}

func (r *FakeGatewaySessionSearcher) TxCount(tx *sqlx.Tx, searchRequest search.GatewaySessionSearchRequest) (searcher.CountResult, error) {
	return r.Count(searchRequest)
}

func (r *FakeGatewaySessionSearcher) ById(id zeus.Uuid) (types.GatewaySession, error) {
	if len(r.fakeIdMap) == 0 {
		return r.fakeResponse[0], nil
	}

	entity, ok := r.fakeIdMap[id]
	if !ok {
		return types.GatewaySession{}, errors.New("Not able to find GatewaySession by id: " + string(id))
	}

	return entity, r.fakeError
}

func (r *FakeGatewaySessionSearcher) TxById(tx *sqlx.Tx, id zeus.Uuid) (types.GatewaySession, error) {
	return r.ById(id)
}

func (r *FakeGatewaySessionSearcher) SetByIdResponses(resp map[zeus.Uuid]types.GatewaySession) {
	r.fakeIdMap = resp
}

func (r *FakeGatewaySessionSearcher) SetError(err error) {
	r.fakeError = err
}

func (r *FakeGatewaySessionSearcher) GetFakeError() error {
	return r.fakeError
}

func (r *FakeGatewaySessionSearcher) GetOnOccurrenceReturns() map[int][]types.GatewaySession {
	return r.onOccurrenceReturns
}

func (r *FakeGatewaySessionSearcher) SetOnOccurrenceReturns(val map[int][]types.GatewaySession) {
	r.onOccurrenceReturns = val
}

func (r *FakeGatewaySessionSearcher) GetOnOccurrenceCountReturns() map[int]int {
	return r.onOccurrenceCountReturns
}

func (r *FakeGatewaySessionSearcher) SetOnOccurrenceCountReturns(val map[int]int) {
	r.onOccurrenceCountReturns = val
}
